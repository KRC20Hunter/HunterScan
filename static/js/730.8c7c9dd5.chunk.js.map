{"version":3,"file":"static/js/730.8c7c9dd5.chunk.js","mappings":"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","sources":["pages/MintHeatmap.tsx","utils/censorTicker.ts"],"sourcesContent":["import React, {FC, useCallback, useEffect, useState} from 'react';\nimport {Col, Container, Form, Row} from 'react-bootstrap';\nimport {Legend, ResponsiveContainer, Tooltip, Treemap} from 'recharts';\nimport 'styles/MintHeatmap.css';\nimport {censorTicker} from '../utils/censorTicker';\nimport {JsonLd, LoadingSpinner, Page, sendRequest, SEO} from \"nacho-component-library\";\nimport {MintData} from \"../interfaces/MintData\";\nimport {addAlert} from \"../components/alerts/Alerts\";\nimport {katscanApiUrl} from \"../utils/StaticVariables\";\n\nconst timeframes = [\n    {value: 'day', label: 'Last 24 Hours'},\n    {value: 'week', label: 'This Week'},\n    {value: 'month', label: 'This Month'},\n    {value: 'year', label: 'This Year'},\n    {value: 'all', label: 'All Time'},\n];\n\ntype InternalMintData = {\n    name: string,\n    children: { name: string, size: number, actualSize: number }[]\n}\n\ntype TreemapContentType = {\n    root: Record<string, string | []>,\n    depth: number,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    index: number,\n    name: string\n}\ntype TooltipType = { active: boolean, payload: { payload: { name: string, actualSize: number } }[] }\n\n// todo refactor\nconst MintHeatmap: FC = () => {\n    const [mintData, setMintData] = useState<InternalMintData[]>([]);\n    const [loading, setLoading] = useState(false);\n    const [timeframe, setTimeframe] = useState('week');\n    const [totalMints, setTotalMints] = useState(0);\n\n    const getStartDate = (timeframe: string): Date => {\n        const now = new Date();\n        switch (timeframe) {\n            case 'day':\n                return new Date(now.setHours(0, 0, 0, 0));\n            case 'week':\n                return new Date(now.setDate(now.getDate() - 7));\n            case 'month':\n                return new Date(now.setMonth(now.getMonth() - 1));\n            case 'year':\n                return new Date(now.setFullYear(now.getFullYear() - 1));\n            case 'all':\n                return new Date('2024-01-01T00:00:00Z');\n            default:\n                return new Date(now.setDate(now.getDate() - 7));\n        }\n    };\n\n    const fetchMintData = useCallback(async (): Promise<void> => {\n        if (!timeframe) return;\n        setLoading(true);\n        const startDate = getStartDate(timeframe);\n        const endDate = new Date();\n\n        try {\n            const response = await sendRequest<MintData[]>({\n                method: 'GET',\n                url: `${katscanApiUrl}/minting/mint-totals`,\n                params: {\n                    startDate: startDate.toISOString(),\n                    endDate: endDate.toISOString()\n                }\n            });\n            if (!response || !Array.isArray(response)) {\n                throw new Error('Invalid response format');\n            }\n            if (response.length > 0) {\n                const processedData = response\n                    .sort((a, b) => b.mintTotal - a.mintTotal)\n                    .slice(0, 100)\n                    .map((item) => ({\n                        name: item.tick,\n                        size: Math.log(item.mintTotal + 1),\n                        actualSize: item.mintTotal,\n                    }));\n                setMintData([{\n                    name: 'tokens',\n                    children: processedData\n                }]);\n                setTotalMints(response.reduce((sum, item) => sum + item.mintTotal, 0));\n            } else {\n                setMintData([{\n                    name: 'tokens',\n                    children: [{name: 'No data', size: 1, actualSize: 0}]\n                }]);\n                setTotalMints(0);\n            }\n        } catch (error) {\n            console.error('Error fetching mint data:', error);\n            addAlert('error', 'Failed to fetch mint data. Please try again later.');\n            setMintData([{\n                name: 'tokens',\n                children: [{name: 'Error', size: 1, actualSize: 0}]\n            }]);\n            setTotalMints(0);\n        }\n        setLoading(false);\n    }, [timeframe]);\n\n    useEffect(() => {\n        if (timeframe) {\n            void fetchMintData();\n        }\n    }, [timeframe, fetchMintData]);\n\n    //todo Refactor after ts\n    const CustomTooltip = ({active, payload}: TooltipType) => {\n        if (active && payload && payload.length) {\n            const data = payload[0].payload;\n            const percentage = ((data.actualSize / totalMints) * 100).toFixed(2);\n            return (\n                <div className=\"custom-tooltip\">\n                    <p><strong>{censorTicker(data.name)}</strong></p>\n                    <p>Mints: {data.actualSize.toLocaleString()}</p>\n                    <p>Percentage: {percentage}%</p>\n                </div>\n            );\n        }\n        return null;\n    };\n\n\n    // todo refactor after ts\n    const CustomTreemapContent = ({root, x, y, width, height, index, name}: TreemapContentType) => {\n        const fontSize = Math.min(width / 6, height / 4, 16);\n        const shortName = name && name.length > 6 ? `${name.slice(0, 5)}...` : name;\n\n        let fillColor = 'hsl(0, 0%, 50%)';\n        if (root && root.children && root.children.length > 0) {\n            const colorIndex = Math.min(Math.max(index, 0), root.children.length - 1);\n            fillColor = `hsl(${(1 - colorIndex / root.children.length) * 120}, 70%, 50%)`;\n        }\n\n\n        return (\n            <g>\n                <rect\n                    x={x}\n                    y={y}\n                    width={width}\n                    height={height}\n                    style={{\n                        fill: fillColor,\n                        stroke: '#fff',\n                        strokeWidth: 2,\n                        strokeOpacity: 1,\n                        // eslint-disable-next-line\n                        // @ts-ignore\n                        rx: 4,\n                        ry: 4,\n                    }}\n                />\n                {width > 30 && height > 30 && shortName && (\n                    <text\n                        x={x + width / 2}\n                        y={y + height / 2}\n                        textAnchor=\"middle\"\n                        fill=\"#fff\"\n                        fontSize={fontSize}\n                    >\n                        {shortName}\n                    </text>\n                )}\n            </g>\n        );\n    };\n\n    const CustomLegend = () => (\n        <div className=\"custom-legend\">\n            <div className=\"legend-item\">\n                <span className=\"legend-color\" style={{backgroundColor: 'hsl(120, 70%, 50%)'}}></span>\n                <span>High mint activity</span>\n            </div>\n            <div className=\"legend-item\">\n                <span className=\"legend-color\" style={{backgroundColor: 'hsl(60, 70%, 50%)'}}></span>\n                <span>Medium mint activity</span>\n            </div>\n            <div className=\"legend-item\">\n                <span className=\"legend-color\" style={{backgroundColor: 'hsl(0, 70%, 50%)'}}></span>\n                <span>Low mint activity</span>\n            </div>\n        </div>\n    );\n\n    return (\n        <Page header={'Token Mint Heatmap'}>\n            <Container fluid className=\"mint-heatmap\">\n                <SEO\n                    title=\"Mint Heatmap\"\n                    description=\"Visualize KRC-20 token minting activity on the Kaspa blockchain with an interactive heatmap.\"\n                    keywords=\"KRC-20, Kaspa, mint heatmap, token activity, visualization\"\n                />\n                <JsonLd\n                    data={{\n                        \"@context\": \"https://schema.org\",\n                        \"@type\": \"WebApplication\",\n                        \"name\": \"KatScan Mint Heatmap\",\n                        \"description\": \"Visualize KRC-20 token minting activity on the Kaspa blockchain with an interactive heatmap.\",\n                        \"url\": \"https://katscan.xyz/mint-heatmap\"\n                    }}\n                />\n                {/* Remove the following Alert component */}\n                {/* <Alert variant=\"warning\">\n                Note: The data displayed on this page may not be accurate due to an ongoing backend service issue.\n            </Alert> */}\n                <Row className=\"mb-3\">\n                    <Col md={4}>\n                        <Form.Group>\n                            <Form.Label>Timeframe</Form.Label>\n                            <Form.Control\n                                as=\"select\"\n                                value={timeframe}\n                                onChange={(e) => setTimeframe(e.target.value)}\n                            >\n                                <option value=\"\">Select a timeframe</option>\n                                {timeframes.map((tf) => (\n                                    <option key={tf.value} value={tf.value}>\n                                        {tf.label}\n                                    </option>\n                                ))}\n                            </Form.Control>\n                        </Form.Group>\n                    </Col>\n                    <Col md={8}>\n                        {totalMints > 0 && (\n                            <p className=\"total-mints\">Total Mints: {totalMints.toLocaleString()}</p>\n                        )}\n                    </Col>\n                </Row>\n                {!timeframe && <p>Please select a timeframe to view the mint heatmap.</p>}\n                {loading && <LoadingSpinner useFlexHeight={true}/>}\n                {timeframe && mintData.length > 0 && (\n                    <div className=\"chart-container\">\n                        <ResponsiveContainer width=\"100%\" height=\"100%\">\n                            <Treemap\n                                data={mintData}\n                                dataKey=\"size\"\n                                aspectRatio={4 / 3}\n                                stroke=\"#fff\"\n                                // eslint-disable-next-line\n                                //@ts-ignore\n                                content={<CustomTreemapContent/>}\n                                animationDuration={500}\n                                animationEasing=\"ease-in-out\"\n                            >\n                                {/* eslint-disable-next-line*/}\n                                {/*@ts-ignore*/}\n                                <Tooltip content={<CustomTooltip/>}/>\n                                <Legend content={<CustomLegend/>}/>\n                            </Treemap>\n                        </ResponsiveContainer>\n                    </div>\n                )}\n                {timeframe && mintData.length === 0 && (\n                    <p>No mint data available for the selected timeframe.</p>\n                )}\n            </Container>\n        </Page>\n    );\n};\n\nexport default MintHeatmap;","export const censorTicker = (ticker: string): string => {\n    const offensiveWords: Record<string, string> = {\n        'NIGGA': 'N***A',\n        'NIGGAS': 'N****S',\n        'NIGGER': 'N****R',\n        'RETARD': 'R****D',\n        'FAG': 'F**',\n        'FAGS': 'F**S',\n        'FAGGOT': 'F****T',\n        'DYKE': 'D**E',\n        'DYKES': 'D**ES',\n        'TRANNY': 'T****Y',\n        'SPIC': 'S**C',\n        'SPICS': 'S**CS',\n        'KIKE': 'K**E',\n        'KIKES': 'K***S',\n        'CHINK': 'C***K',\n        'CHINKS': 'C***KS',\n        'GOOK': 'G**K',\n        'GOOKS': 'G**KS',\n        'WOP': 'W**',\n        'WOPS': 'W**S',\n        'TARD': 'T**D'\n    };\n    return offensiveWords[ticker] || ticker;\n};\n"],"names":["timeframes","value","label","MintHeatmap","mintData","setMintData","useState","loading","setLoading","timeframe","setTimeframe","totalMints","setTotalMints","fetchMintData","useCallback","async","startDate","now","Date","setHours","setDate","getDate","setMonth","getMonth","setFullYear","getFullYear","getStartDate","endDate","response","sendRequest","method","url","concat","katscanApiUrl","params","toISOString","Array","isArray","Error","length","processedData","sort","a","b","mintTotal","slice","map","item","name","tick","size","Math","log","actualSize","children","reduce","sum","error","console","addAlert","useEffect","CustomTooltip","_ref","active","payload","data","percentage","toFixed","_jsxs","className","_jsx","censorTicker","toLocaleString","CustomTreemapContent","_ref2","root","x","y","width","height","index","fontSize","min","shortName","fillColor","colorIndex","max","style","fill","stroke","strokeWidth","strokeOpacity","rx","ry","textAnchor","CustomLegend","backgroundColor","Page","header","Container","fluid","SEO","title","description","keywords","JsonLd","Row","Col","md","Form","Group","Label","Control","as","onChange","e","target","tf","LoadingSpinner","useFlexHeight","ResponsiveContainer","Treemap","dataKey","aspectRatio","content","animationDuration","animationEasing","Tooltip","Legend","ticker"],"sourceRoot":""}