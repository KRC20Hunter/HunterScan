{"version":3,"file":"static/js/682.78d03b25.chunk.js","mappings":"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","sources":["components/tables/MobileTransactionTable.tsx","components/tabs/walletOverview/TransactionsOverview.tsx","components/tables/MobileUTXOTable.tsx","components/tabs/walletOverview/UTXOOverview.tsx","pages/WalletLookup.tsx","components/tabs/walletOverview/hooks/useTransactions.ts","components/tabs/walletOverview/hooks/useUTXOs.ts","utils/censorTicker.ts"],"sourcesContent":["import React, {FC} from \"react\";\nimport {Card} from \"react-bootstrap\";\nimport {Transaction} from \"../../interfaces/Transaction\";\nimport 'styles/components/MobileTable.css'\n\ntype Props = {\n    transactions: Transaction[]\n    openExplorer: (transactionId: string) => void\n    formatNumber: (number: number) => string\n    shortenString: (transactionId: string) => string\n}\n\nexport const MobileTransactionTable: FC<Props> = (\n    {\n        transactions,\n        openExplorer,\n        formatNumber,\n        shortenString\n    }\n) => (\n    <div className=\"mobile-table\">\n        {transactions.map(tx => (\n            <Card key={tx.transaction_id} className=\"mb-3\">\n                <Card.Body>\n                    <div className=\"mobile-table-row\" onClick={() => openExplorer(tx.transaction_id)}>\n                        <div className=\"mobile-table-cell\">\n                            <strong>Transaction ID:</strong>\n                            {shortenString(tx.transaction_id)}\n                        </div>\n                        <div className=\"mobile-table-cell\">\n                            <strong>Amount (KAS):</strong>\n                            {formatNumber(tx.outputs.reduce((sum, output) => sum + parseInt(output.amount), 0) / 1e8)}\n                        </div>\n                        <div className=\"mobile-table-cell\">\n                            <strong>Block Time:</strong> {new Date(tx.block_time).toLocaleString()}\n                        </div>\n                    </div>\n                </Card.Body>\n            </Card>\n        ))}\n    </div>\n);","import React, {FC, useCallback, useRef} from 'react'\nimport {MobileTransactionTable} from \"../../tables/MobileTransactionTable\";\nimport {formatNumber, openTransaction, shortenString} from \"../../../services/Helper\";\nimport {Table} from \"react-bootstrap\";\nimport {useMobile} from \"nacho-component-library\";\nimport {TransactionStore} from \"./hooks/useTransactions\";\n\nexport const TransactionOverview: FC<TransactionStore> = (\n    {\n        transactions,\n        loadingTransactions,\n        loadMore,\n        hasMoreTransactions\n    }\n) => {\n\n    const {isMobile} = useMobile()\n    const transactionObserver = useRef<IntersectionObserver>();\n\n    const lastTransactionElementRef = useCallback((node: HTMLTableRowElement) => {\n        if (loadingTransactions) {\n            return\n        }\n        if (transactionObserver.current) {\n            transactionObserver.current.disconnect()\n        }\n        transactionObserver.current = new IntersectionObserver(entries => {\n            if (entries[0].isIntersecting && hasMoreTransactions) {\n                loadMore();\n            }\n        });\n        if (node) transactionObserver.current.observe(node);\n    }, [loadingTransactions, hasMoreTransactions, loadMore]);\n\n    return <div className=\"table-wrapper\">\n        {isMobile ? (\n            <MobileTransactionTable\n                transactions={transactions}\n                openExplorer={openTransaction}\n                formatNumber={formatNumber}\n                shortenString={shortenString}\n            />\n        ) : (\n            <Table striped bordered hover>\n                <thead>\n                <tr>\n                    <th>Transaction ID</th>\n                    <th>Amount (KAS)</th>\n                    <th>Block Time</th>\n                </tr>\n                </thead>\n                <tbody>\n                {transactions.map((tx, index) => (\n                    <tr\n                        key={tx.transaction_id}\n                        ref={index === transactions.length - 1 ? lastTransactionElementRef : null}\n                        onClick={() => openTransaction(tx.transaction_id)}\n                        className=\"clickable-row\"\n                    >\n                        <td>{tx.transaction_id}</td>\n                        <td>{formatNumber(tx.outputs.reduce((sum, output) => sum + parseInt(output.amount), 0) / 1e8)}</td>\n                        <td>{new Date(tx.block_time).toLocaleString()}</td>\n                    </tr>\n                ))}\n                </tbody>\n            </Table>\n        )}\n        {loadingTransactions &&\n            <div className=\"loading-message\">Loading more transactions...</div>}\n    </div>\n}","import {Card} from \"react-bootstrap\";\nimport React, {FC} from \"react\";\nimport {Utxos} from \"../../interfaces/WalletData\";\nimport 'styles/components/MobileTable.css'\n\ntype Props = {\n    utxos: Utxos[]\n    openExplorer: (transactionId: string) => void\n    formatNumber: (number: number) => string\n    shortenString: (str: string) => string\n}\nexport const MobileUTXOTable: FC<Props> = (\n    {\n        utxos,\n        openExplorer,\n        formatNumber,\n        shortenString\n    }\n) => (\n    <div className=\"mobile-table\">\n        {utxos.map(utxo => (\n            <Card key={`${utxo.outpoint.transactionId}-${utxo.outpoint.index}`} className=\"mb-3\">\n                <Card.Body>\n                    <div className=\"mobile-table-row\" onClick={() => openExplorer(utxo.outpoint.transactionId)}>\n                        <div className=\"mobile-table-cell\">\n                            <strong>Transaction ID:</strong> {shortenString(utxo.outpoint.transactionId)}\n                        </div>\n                        <div className=\"mobile-table-cell\">\n                            <strong>Index:</strong> {utxo.outpoint.index}\n                        </div>\n                        <div className=\"mobile-table-cell\">\n                            <strong>Amount (KAS):</strong> {formatNumber(parseInt(utxo.utxoEntry.amount) / 1e8)}\n                        </div>\n                        <div className=\"mobile-table-cell\">\n                            <strong>Block DAA Score:</strong> {utxo.utxoEntry.blockDaaScore}\n                        </div>\n                        <div className=\"mobile-table-cell\">\n                            <strong>Miner Reward:</strong> {utxo.utxoEntry.isCoinbase ? 'Yes' : 'No'}\n                        </div>\n                        <div className=\"mobile-table-cell\">\n                            <strong>Status:</strong> Unspent\n                        </div>\n                    </div>\n                </Card.Body>\n            </Card>\n        ))}\n    </div>\n);","import React, {FC, useCallback, useRef} from \"react\";\nimport {MobileUTXOTable} from \"../../tables/MobileUTXOTable\";\nimport {formatNumber, openTransaction, shortenString} from \"../../../services/Helper\";\nimport {Table} from \"react-bootstrap\";\nimport {useMobile} from \"nacho-component-library\";\nimport {UTXOStore} from \"./hooks/useUTXOs\";\n\n\nexport const UTXOOverview: FC<UTXOStore> = (\n    {\n        utxos,\n        hasMoreUtxos,\n        loadingUtxos,\n        loadMore\n    }\n) => {\n    const {isMobile} = useMobile()\n    const utxoObserver = useRef<IntersectionObserver>();\n\n    const lastUtxoElementRef = useCallback((node: HTMLTableRowElement) => {\n        if (loadingUtxos) {\n            return\n        }\n        if (utxoObserver.current) {\n            utxoObserver.current.disconnect()\n        }\n\n        utxoObserver.current = new IntersectionObserver(entries => {\n            if (entries[0].isIntersecting && hasMoreUtxos) {\n                loadMore()\n            }\n        })\n\n        if (node) {\n            utxoObserver.current.observe(node)\n        }\n    }, [loadingUtxos, hasMoreUtxos, loadMore]);\n\n    return <div className=\"table-wrapper\">\n        {isMobile ? (\n            <MobileUTXOTable\n                utxos={utxos}\n                openExplorer={openTransaction}\n                formatNumber={formatNumber}\n                shortenString={shortenString}\n            />\n        ) : (\n            <Table striped bordered hover>\n                <thead>\n                <tr>\n                    <th>Transaction ID</th>\n                    <th>Index</th>\n                    <th>Amount (KAS)</th>\n                    <th>Block DAA Score</th>\n                    <th>Miner Reward</th>\n                    <th>Status</th>\n                </tr>\n                </thead>\n                <tbody>\n                {utxos.map((utxo, index) => (\n                    <tr\n                        key={`${utxo.outpoint.transactionId}-${utxo.outpoint.index}`}\n                        ref={index === utxos.length - 1 ? lastUtxoElementRef : null}\n                        onClick={() => openTransaction(utxo.outpoint.transactionId)}\n                        className=\"clickable-row\"\n                    >\n                        <td>{utxo.outpoint.transactionId}</td>\n                        <td>{utxo.outpoint.index}</td>\n                        <td>{formatNumber(parseInt(utxo.utxoEntry.amount) / 1e8)}</td>\n                        <td>{utxo.utxoEntry.blockDaaScore}</td>\n                        <td>{utxo.utxoEntry.isCoinbase ? 'Yes' : 'No'}</td>\n                        <td>Unspent</td>\n                    </tr>\n                ))}\n                </tbody>\n            </Table>\n        )}\n        {loadingUtxos && <div className=\"loading-message\">Loading more UTXOs...</div>}\n    </div>\n}","import React, {FC, useEffect, useState} from 'react';\nimport {useNavigate, useParams} from 'react-router-dom';\nimport {Container, Table} from 'react-bootstrap';\nimport {FaCopy} from 'react-icons/fa';\nimport 'styles/WalletLookup.css';\nimport {censorTicker} from '../utils/censorTicker';\nimport {TokenListResponse} from \"../interfaces/ApiResponseTypes\";\nimport {WalletBalance, WalletToken, WalletTotal} from \"../interfaces/WalletData\";\nimport {copyToClipboard, formatNumber} from \"../services/Helper\";\nimport {\n    CustomTabs,\n    Input,\n    JsonLd,\n    LoadingSpinner,\n    NormalCard,\n    Page,\n    SEO,\n    simpleRequest,\n    useMobile\n} from \"nacho-component-library\";\nimport {TransactionOverview} from \"../components/tabs/walletOverview/TransactionsOverview\";\nimport {useTransactions} from \"../components/tabs/walletOverview/hooks/useTransactions\";\nimport {useUTXOs} from \"../components/tabs/walletOverview/hooks/useUTXOs\";\nimport {UTXOOverview} from \"../components/tabs/walletOverview/UTXOOverview\";\nimport {addAlert} from \"../components/alerts/Alerts\";\n\ntype InternalWalletData = {\n    address: string\n    krc20Balances: WalletToken[]\n    kaspaBalance: number\n    transactionCount: number\n}\n\nconst mobileTabs = ['General Info', 'Additional Info']\n\nconst WalletLookup: FC = () => {\n\n    const {walletAddress} = useParams();\n    const navigate = useNavigate();\n    const {isMobile} = useMobile()\n\n    const [address, setAddress] = useState(walletAddress ?? '');\n    const [addressValid, setAddressValid] = useState(false)\n    const transactionData = useTransactions(addressValid, walletAddress)\n    const utxoData = useUTXOs(addressValid, walletAddress)\n\n    const [walletData, setWalletData] = useState<InternalWalletData | null>(null);\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        if (!walletAddress) {\n            return\n        }\n\n        simpleRequest<WalletBalance>(`https://api.kaspa.org/addresses/${walletAddress}/balance`)\n            .then(balanceResponse => {\n                setLoading(true);\n                //wallet address is valid\n                setAddress(walletAddress);\n                setAddressValid(true)\n                Promise.all([\n                    simpleRequest<TokenListResponse<WalletToken[]>>(`https://api.kasplex.org/v1/krc20/address/${walletAddress}/tokenlist`),\n                    simpleRequest<WalletTotal>(`https://api.kaspa.org/addresses/${walletAddress}/transactions-count`)\n                ])\n                    .then(([krc20Response, transactionCountResponse]): void => {\n\n                        const krc20Balances: WalletToken[] = krc20Response.result.map(token => ({\n                            ...token,\n                            balance: token.balance / Math.pow(10, token.dec),\n                        }));\n\n                        setWalletData({\n                            address: walletAddress,\n                            krc20Balances,\n                            kaspaBalance: balanceResponse.balance,\n                            transactionCount: transactionCountResponse.total,\n                        });\n                    })\n                    .catch(() => {\n                        addAlert('error', 'Failed to fetch wallet data. Please try again.')\n                    })\n                    .finally(() => {\n                        setLoading(false);\n                    })\n            })\n            .catch(() => {\n                addAlert('error', 'Failed to fetch wallet data. Is the wallet address correct?')\n                setLoading(false);\n                setAddressValid(false)\n            })\n\n    }, [walletAddress])\n\n    const handleSubmit = (e: string | undefined) => {\n        if (e) {\n            navigate(`/wallet/${e}`);\n        }\n    };\n\n    return (\n        <Page header={'Wallet Lookup'}>\n            <Container className='wallet-lookup'>\n                <SEO\n                    title=\"Wallet Lookup\"\n                    description=\"Look up KRC-20 token balances and transaction history for any wallet address on the Kaspa blockchain.\"\n                    keywords=\"KRC-20, Kaspa, wallet lookup, token balances, transaction history\"\n                />\n                <JsonLd\n                    data={{\n                        \"@context\": \"https://schema.org\",\n                        \"@type\": \"WebApplication\",\n                        \"name\": \"KatScan Wallet Lookup\",\n                        \"description\": \"Look up KRC-20 token balances and transaction history for any wallet address on the Kaspa blockchain.\",\n                        \"url\": \"https://katscan.xyz/wallet\"\n                    }}\n                />\n\n                <Input customClass={'mb-3'}\n                       onSubmit={handleSubmit}\n                       value={address}\n                       placeholder={'Enter wallet address'}\n                       onChangeCallback={setAddress}/>\n\n                {loading && <LoadingSpinner/>}\n\n                {walletData && (\n                    <div className=\"wallet-details\">\n                        {isMobile\n                            ? <CustomTabs titles={mobileTabs}>\n                                <WalletCard walletData={walletData}/>\n                                <CustomTabs titles={['KRC20 Tokens', 'Recent Transactions', 'UTXOs']}>\n                                    <TokenBalance walletData={walletData}/>\n                                    <TransactionOverview {...transactionData}/>\n                                    <UTXOOverview {...utxoData}/>\n                                </CustomTabs>\n                            </CustomTabs>\n                            : <>\n                                <WalletCard walletData={walletData}/>\n                                <CustomTabs titles={['KRC20 Tokens', 'Recent Transactions', 'UTXOs']}>\n                                    <TokenBalance walletData={walletData}/>\n                                    <TransactionOverview {...transactionData}/>\n                                    <UTXOOverview {...utxoData}/>\n                                </CustomTabs>\n                            </>\n                        }\n                    </div>\n                )}\n            </Container>\n        </Page>\n    );\n};\n\nexport default WalletLookup;\n\ntype WalletCardProps = {\n    walletData: InternalWalletData\n}\nconst WalletCard: FC<WalletCardProps> = (\n    {\n        walletData\n    }\n) => {\n\n    return <div className=\"wallet-overview\">\n        <NormalCard title={'Wallet Overview'}>\n            <div className={'grid'}>\n                <strong>Address:</strong>\n                <div>\n                    {walletData.address}\n                    <FaCopy className=\"clickable\"\n                            onClick={() => copyToClipboard(walletData.address)}/>\n                </div>\n\n                <strong>Kaspa Balance:</strong>\n                <div>{formatNumber(walletData.kaspaBalance / 1e8)} KAS</div>\n                <strong>Transaction Count:</strong> {walletData.transactionCount}\n            </div>\n        </NormalCard>\n    </div>\n}\n\ntype TokenBalanceType = {\n    walletData: InternalWalletData\n}\n\nexport const TokenBalance: FC<TokenBalanceType> = (\n    {\n        walletData\n    }\n) => {\n    return <div className=\"table-wrapper\">\n        <Table striped bordered hover>\n            <thead>\n            <tr>\n                <th>Token</th>\n                <th>Balance</th>\n            </tr>\n            </thead>\n            <tbody>\n            {walletData.krc20Balances.map((token) => (\n                <tr key={token.tick}>\n                    <td>{censorTicker(token.tick)}</td>\n                    <td>{formatNumber(token.balance)}</td>\n                </tr>\n            ))}\n            </tbody>\n        </Table>\n    </div>\n}","import {useCallback, useEffect, useMemo, useState} from 'react'\nimport {simpleRequest} from \"nacho-component-library\";\nimport {Transaction} from \"../../../../interfaces/Transaction\";\n\nexport type TransactionStore = {\n    transactions: Transaction[]\n    transactionPage: number\n    loadingTransactions: boolean\n    loadMore: () => void\n    hasMoreTransactions: boolean\n}\nexport const useTransactions = (addressValid: boolean, walletAddress: string | undefined): TransactionStore => {\n\n    const [transactions, setTransactions] = useState<Transaction[]>([]);\n    const [transactionPage, setTransactionPage] = useState(0);\n    const [hasMoreTransactions, setHasMoreTransactions] = useState(true);\n    const [loadingTransactions, setLoadingTransactions] = useState(false);\n\n    const fetchTransactions = useCallback(async (addr: string, page: number) => {\n        setLoadingTransactions(true);\n        try {\n            const result = await simpleRequest<Transaction[]>(`https://api.kaspa.org/addresses/${addr}/full-transactions?limit=20&offset=${page * 20}&resolve_previous_outpoints=light`);\n            setTransactionPage(page + 1);\n            setHasMoreTransactions(result.length === 20);\n            return result\n        } catch (err) {\n            console.error('Failed to fetch transactions:', err);\n            return []\n        } finally {\n            setLoadingTransactions(false);\n        }\n    }, []);\n\n    useEffect(() => {\n        if (!walletAddress || !addressValid) {\n            return\n        }\n        void fetchTransactions(walletAddress, 0)\n            .then(setTransactions)\n    }, [walletAddress, fetchTransactions, addressValid])\n\n    const loadMore = useCallback(() => {\n        if (!walletAddress){\n            return\n        }\n        if (hasMoreTransactions) {\n            void fetchTransactions(walletAddress, transactionPage)\n                .then(result => {\n                    setTransactions(current => ([...current, ...result]))\n                })\n        }\n    }, [fetchTransactions, hasMoreTransactions, transactionPage, walletAddress])\n\n    return useMemo((): TransactionStore => {\n        return {\n            transactions,\n            transactionPage,\n            loadingTransactions,\n            loadMore,\n            hasMoreTransactions\n        }\n    }, [\n        transactions,\n        transactionPage,\n        loadingTransactions,\n        loadMore,\n        hasMoreTransactions\n    ])\n}","import {useCallback, useEffect, useMemo, useState} from \"react\";\nimport {Utxos} from \"../../../../interfaces/WalletData\";\nimport {simpleRequest} from \"nacho-component-library\";\n\nexport type UTXOStore = {\n    utxos: Utxos[]\n    utxoPage: number\n    loadingUtxos: boolean\n    loadMore: () => void\n    hasMoreUtxos: boolean\n}\n\nexport const useUTXOs = (addressValid: boolean, walletAddress: string | undefined): UTXOStore => {\n\n    const [utxos, setUtxos] = useState<Utxos[]>([]);\n    const [utxoPage, setUtxoPage] = useState(0);\n    const [hasMoreUtxos, setHasMoreUtxos] = useState(true);\n    const [loadingUtxos, setLoadingUtxos] = useState(false);\n\n    const optimiseData = useCallback((newUtxos: Utxos[]) => {\n        setUtxos(prevUtxos => {\n            // Create a Set of unique identifiers for existing UTXOs\n            const existingUtxoSet = new Set(\n                prevUtxos.map(utxo => `${utxo.outpoint.transactionId}-${utxo.outpoint.index}`)\n            );\n\n            // Filter out duplicates from the new UTXOs\n            const uniqueNewUtxos = newUtxos.filter(\n                utxo => !existingUtxoSet.has(`${utxo.outpoint.transactionId}-${utxo.outpoint.index}`)\n            );\n\n            return [...prevUtxos, ...uniqueNewUtxos];\n        });\n\n    }, [])\n\n    const fetchUtxos = useCallback(async (addr: string, page: number) => {\n        setLoadingUtxos(true);\n        try {\n            const newUtxos = await simpleRequest<Utxos[]>(`https://api.kaspa.org/addresses/${addr}/utxos?limit=20&offset=${page * 20}`);\n            setUtxoPage(page + 1);\n            setHasMoreUtxos(newUtxos.length === 20);\n            return newUtxos\n        } catch (err) {\n            console.error('Failed to fetch UTXOs:', err);\n            return []\n        } finally {\n            setLoadingUtxos(false);\n        }\n    }, [])\n\n    useEffect(() => {\n        if (!walletAddress || !addressValid) {\n            return\n        }\n        void fetchUtxos(walletAddress, 0)\n            .then(setUtxos)\n    }, [addressValid, fetchUtxos, walletAddress]);\n\n    const loadMore = useCallback(() => {\n        if (!walletAddress) {\n            return\n        }\n        if (hasMoreUtxos) {\n            void fetchUtxos(walletAddress, utxoPage)\n                .then(optimiseData)\n        }\n    }, [fetchUtxos, hasMoreUtxos, optimiseData, utxoPage, walletAddress])\n\n    return useMemo((): UTXOStore => {\n        return {\n            utxos,\n            utxoPage,\n            hasMoreUtxos,\n            loadingUtxos,\n            loadMore\n        }\n    }, [hasMoreUtxos, loadMore, loadingUtxos, utxoPage, utxos])\n}","export const censorTicker = (ticker: string): string => {\n    const offensiveWords: Record<string, string> = {\n        'NIGGA': 'N***A',\n        'NIGGAS': 'N****S',\n        'NIGGER': 'N****R',\n        'RETARD': 'R****D',\n        'FAG': 'F**',\n        'FAGS': 'F**S',\n        'FAGGOT': 'F****T',\n        'DYKE': 'D**E',\n        'DYKES': 'D**ES',\n        'TRANNY': 'T****Y',\n        'SPIC': 'S**C',\n        'SPICS': 'S**CS',\n        'KIKE': 'K**E',\n        'KIKES': 'K***S',\n        'CHINK': 'C***K',\n        'CHINKS': 'C***KS',\n        'GOOK': 'G**K',\n        'GOOKS': 'G**KS',\n        'WOP': 'W**',\n        'WOPS': 'W**S',\n        'TARD': 'T**D'\n    };\n    return offensiveWords[ticker] || ticker;\n};\n"],"names":["MobileTransactionTable","_ref","transactions","openExplorer","formatNumber","shortenString","_jsx","className","children","map","tx","Card","Body","_jsxs","onClick","transaction_id","outputs","reduce","sum","output","parseInt","amount","Date","block_time","toLocaleString","TransactionOverview","loadingTransactions","loadMore","hasMoreTransactions","isMobile","useMobile","transactionObserver","useRef","lastTransactionElementRef","useCallback","node","current","disconnect","IntersectionObserver","entries","isIntersecting","observe","openTransaction","Table","striped","bordered","hover","index","ref","length","MobileUTXOTable","utxos","utxo","outpoint","transactionId","utxoEntry","blockDaaScore","isCoinbase","concat","UTXOOverview","hasMoreUtxos","loadingUtxos","utxoObserver","lastUtxoElementRef","mobileTabs","WalletLookup","walletAddress","useParams","navigate","useNavigate","address","setAddress","useState","addressValid","setAddressValid","transactionData","useTransactions","setTransactions","transactionPage","setTransactionPage","setHasMoreTransactions","setLoadingTransactions","fetchTransactions","async","addr","page","result","simpleRequest","err","console","error","useEffect","then","useMemo","utxoData","useUTXOs","setUtxos","utxoPage","setUtxoPage","setHasMoreUtxos","setLoadingUtxos","optimiseData","newUtxos","prevUtxos","existingUtxoSet","Set","uniqueNewUtxos","filter","has","fetchUtxos","walletData","setWalletData","loading","setLoading","balanceResponse","Promise","all","krc20Response","transactionCountResponse","krc20Balances","token","_objectSpread","balance","Math","pow","dec","kaspaBalance","transactionCount","total","catch","addAlert","finally","Page","header","Container","SEO","title","description","keywords","JsonLd","data","Input","customClass","onSubmit","e","value","placeholder","onChangeCallback","LoadingSpinner","CustomTabs","titles","WalletCard","TokenBalance","_Fragment","_ref2","NormalCard","FaCopy","copyToClipboard","_ref3","censorTicker","tick","ticker"],"sourceRoot":""}