{"version":3,"file":"static/js/174.6c723baf.chunk.js","mappings":"6LAQO,MAAMA,EAA0BC,IAIjC,IAHF,YACIC,GACHD,EAED,MAAME,EAAYD,EAAYE,IAAMF,EAAYG,SAAW,EAErDC,EAAUA,KACZC,OAAOC,KAAK,yCAA0C,SAAS,EAEnE,OAAOC,EAAAA,EAAAA,MAACC,EAAAA,GAAkB,CAACC,OAAOC,EAAAA,EAAAA,KAACC,EAAAA,IAAa,IAAIC,MAAO,SAASC,SAAA,EAChEH,EAAAA,EAAAA,KAACI,EAAAA,GAAkB,CAACC,QAASX,EAAQS,SAAA,SAAAG,OACvBhB,EAAYiB,KAAKC,cAAa,mBAE1CjB,IAAaS,EAAAA,EAAAA,KAACI,EAAAA,GAAkB,CAACC,QAASX,EAAQS,SAAA,QAAAG,OACvChB,EAAYiB,KAAKC,cAAa,oBAE1B,E,2CCHzB,MAAMC,EAAa,CACf,WAAY,qBACZ,QAAS,UACT,KAAQ,mCACR,YAAe,yDACf,IAAO,8BAILC,EAAuB,CAAC,QAAS,SAAU,OAAQ,YAAa,QAAS,MAAO,MAAO,SAAU,eAAgB,UAsSvH,EApS0BC,KACtB,MAAM,SAACC,IAAYC,EAAAA,EAAAA,OACZC,EAAWC,IAAgBC,EAAAA,EAAAA,UAA+B,KAC1DC,EAAeC,IAAoBF,EAAAA,EAAAA,UAAyB,SAC5DG,EAAYC,IAAiBJ,EAAAA,EAAAA,UAAS,KACtCK,EAAkBC,IAAuBN,EAAAA,EAAAA,UAAS,KAClDO,EAAcC,IAAmBR,EAAAA,EAAAA,UAAS,KAE3C,KAACS,EAAI,QAAEC,IAAWC,EAAAA,EAAAA,GAAsB,CAC1CC,IAAK,qBAGHC,EAAcC,IACZA,IAAUhB,EACVI,GAAiBa,GAAmC,QAAlBA,EAA0B,OAAS,SAErEhB,EAAae,GACbZ,EAAiB,OACrB,EAGEc,EAA0BC,IAC5BX,EAAoBW,EAAS,EAG3BC,EAAsBD,IACxBT,EAAgBS,EAAS,EAGvBE,EAAiBA,CAACC,EAAeC,IAC5BD,EAAQE,KAAKC,IAAI,GAAIF,GAG1BG,EAAsBA,CAACC,EAAcC,IAC/BD,EAAOC,EAAS,IAGtBC,GAA0BC,EAAAA,EAAAA,UAAQ,KACpC,GAAoB,IAAhBnB,EAAKoB,OACL,MAAO,GAEX,IAAIC,GAASC,EAAAA,EAAAA,WAAUtB,GAgDvB,OA7CIN,IACA2B,EAASA,EAAOE,QAAOC,GACnBA,EAAM1C,KAAK2C,cAAcC,SAAShC,EAAW+B,kBAKjD7B,IACAyB,EAASA,EAAOE,QAAOC,IACJ,IAAdA,EAAMG,IAAY,YAAc,cAAgB/B,KAKrDE,IACAuB,EAASA,EAAOE,QAAOC,IACF,aAAhBA,EAAMI,MAAuB,WAAa,aAAe9B,KAKhD,KAAdT,GACAgC,EAAOQ,MAAK,CAACC,EAAGC,KACZ,GAAkB,WAAd1C,EAAwB,CACxB,MAAM2C,EAAcjB,EAAoBL,EAAeoB,EAAE9D,OAAQ8D,EAAEG,KAAMvB,EAAeoB,EAAE/D,IAAK+D,EAAEG,MAC3FC,EAAcnB,EAAoBL,EAAeqB,EAAE/D,OAAQ+D,EAAEE,KAAMvB,EAAeqB,EAAEhE,IAAKgE,EAAEE,MACjG,OAAID,EAAcE,EAAsC,QAAlB1C,GAA2B,EAAI,EACjEwC,EAAcE,EAAsC,QAAlB1C,EAA0B,GAAK,EAC9D,CACX,CACI,OAAKsC,EAAEzC,IAAe0C,EAAE1C,GAGnByC,EAAEzC,GAAyB0C,EAAE1C,GACL,QAAlBG,GAA2B,EAAI,EAErCsC,EAAEzC,GAAyB0C,EAAE1C,GACL,QAAlBG,EAA0B,GAAK,EAGnC,EATI,CAUf,IAID6B,CAAM,GACd,CAACrB,EAAMJ,EAAkBF,EAAYF,EAAeH,EAAWS,IAkB5DqC,EAAmBA,CAACxB,EAAe5C,EAAaqE,KAClD,MAAMC,EAAc1B,EAAQ5C,EAAO,IAC7BuE,EAAsBD,EAAa,GAAKA,EAAa,EAAI,KAAOxB,KAAK0B,MAAMF,GACjF,OAAID,EACM,GAANvD,OAAUyD,EAAmB,KAE3B,IAANzD,OAAWyD,EAAmB,OAO5BE,EAAkBA,CAACC,EAAmB1E,EAAa6C,KACrD,MAAMD,EAAQD,EAAe+B,EAAW7B,GACxC,OAAc,IAAVD,EAAoB,OAClB,GAAN9B,QAAU6D,EAAAA,EAAAA,IAAa/B,GAAM,KAAA9B,OAAIsD,EAAiBxB,EAAOD,EAAe3C,EAAK6C,IAAU,EAgBrF+B,EAAwBA,CAAChC,EAAeC,KAC1C,MAAMgC,EAAc/B,KAAKgC,MAAMlC,EAAQE,KAAKC,IAAI,GAAIF,IACpD,OAAIgC,EAAYE,WAAW1B,SAAWjC,EAAW,EAAI,IAf9BwB,KACvB,MAAMoC,EAAQ,CAAC,GAAI,WAAY,UAAW,UAAW,WAAY,cAAe,cAAe,aAAc,aAAc,YAAa,YAAa,YAAa,cAAe,eAAgB,eAAgB,oBAAqB,gBAAiB,eAAgB,kBAAmB,gBAAiB,iBAAkB,gBAC7T,IAAIC,EAAY,EACZC,EAAMtC,EAEV,KAAOsC,GAAO,KAAQD,EAAYD,EAAM3B,OAAS,GAC7C6B,GAAO,IACPD,IAGJ,MAAO,GAAAnE,OAAGoE,EAAIC,QAAQ,GAAE,KAAArE,OAAIkE,EAAMC,IAAaG,MAAM,EAM1CC,CAAkBR,IAEtBF,EAAAA,EAAAA,IAAa/B,EAAQE,KAAKC,IAAI,GAAIF,GAAU,EAsHvD,OAAQrC,EAAAA,EAAAA,KAAC8E,EAAAA,GAAI,CAACpE,OAAQ,oBACRqE,2BACI/E,EAAAA,EAAAA,KAACgF,EAAAA,GAAK,CAACC,YAAa,6BACbC,YAAa,sBACbC,iBAAkB/D,EAClBgE,SAAUhE,IACpBjB,UACPN,EAAAA,EAAAA,MAAA,OAAKwF,UAAU,iBAAgBlF,SAAA,EAE3BH,EAAAA,EAAAA,KAACsF,EAAAA,GAAI,CAACC,eAAgB7E,EAChB8E,MAAO7C,EACP8C,WAAY,GACZC,UAjECtD,IAEf,OADUA,GAEN,IAAK,QACL,IAAK,SACD,OAAO,KACX,IAAK,OACD,OAAOvC,EAAAA,EAAAA,MAAA,OAAKwF,UAAU,uBACVhF,QAASA,IAAMwB,EAAW,QAAQ1B,SAAA,CAAC,UACrB,SAAdW,IAA2C,QAAlBG,EAA0B,SAAM,aAEzE,IAAK,YACD,OAAOpB,EAAAA,EAAAA,MAAC8F,EAAAA,GAAc,CAAC5F,MAAO,cAAeG,MAAO,SAASC,SAAA,EACzDH,EAAAA,EAAAA,KAACI,EAAAA,GAAkB,CAACC,QAASA,IAAM2B,EAAuB,IAAI7B,SAAC,SAC/DH,EAAAA,EAAAA,KAACI,EAAAA,GAAkB,CAACC,QAASA,IAAM2B,EAAuB,aAAa7B,SAAC,eAExEH,EAAAA,EAAAA,KAACI,EAAAA,GAAkB,CACfC,QAASA,IAAM2B,EAAuB,YAAY7B,SAAC,gBAE/D,IAAK,QACD,OAAON,EAAAA,EAAAA,MAAC8F,EAAAA,GAAc,CAAC5F,MAAO,SAAUG,MAAO,SAASC,SAAA,EACpDH,EAAAA,EAAAA,KAACI,EAAAA,GAAkB,CAACC,QAASA,IAAM6B,EAAmB,IAAI/B,SAAC,SAC3DH,EAAAA,EAAAA,KAACI,EAAAA,GAAkB,CACfC,QAASA,IAAM6B,EAAmB,YAAY/B,SAAC,cACnDH,EAAAA,EAAAA,KAACI,EAAAA,GAAkB,CAACC,QAASA,IAAM6B,EAAmB,WAAW/B,SAAC,eAE1E,IAAK,MACD,OAAON,EAAAA,EAAAA,MAAA,OAAKQ,QAASA,IAAMwB,EAAW,OAC1BwD,UAAW,SAASlF,SAAA,CAAC,cACH,QAAdW,IAA0C,QAAlBG,EAA0B,SAAM,aAE5E,IAAK,MACD,OAAOpB,EAAAA,EAAAA,MAAA,OAAKQ,QAASA,IAAMwB,EAAW,OAC1BwD,UAAW,SAASlF,SAAA,CAAC,cACH,QAAdW,IAA0C,QAAlBG,EAA0B,SAAM,aAE5E,IAAK,SACD,OAAOpB,EAAAA,EAAAA,MAAA,OAAKQ,QAASA,IAAMwB,EAAW,UAC1BwD,UAAW,SAASlF,SAAA,CAAC,gBACD,WAAdW,IAA6C,QAAlBG,EAA0B,SAAM,aAEjF,IAAK,eACD,OAAOjB,EAAAA,EAAAA,KAAA,OAAKqF,UAAU,cAAalF,SAAC,qBACxC,IAAK,SACD,OAAON,EAAAA,EAAAA,MAAA,OAAKQ,QAASA,IAAMwB,EAAW,UAC1BwD,UAAW,SAASlF,SAAA,CAAC,eACF,WAAdW,IAA6C,QAAlBG,EAA0B,SAAM,aAEhF,QACI,OAAOjB,EAAAA,EAAAA,KAAA,OAAAG,SAAMiC,IACrB,EAgBcwD,WAhICA,CAAClF,EAAgBuC,KAGhC,OADuBvC,GAEnB,IAAK,QACD,OAAKuC,EAAM4C,MAIP7F,EAAAA,EAAAA,KAAA,OAAK8F,MAAO,CAACC,MAAO,OAAQC,SAAU,UAAU7F,UAC5CH,EAAAA,EAAAA,KAACiG,EAAAA,GAAI,CAACC,GAAE,WAAA5F,OAAa2C,EAAM1C,MAAQ8E,UAAU,eAAclF,UACvDH,EAAAA,EAAAA,KAACmG,EAAAA,GAAc,CACXC,IAAG,GAAA9F,OAAK+F,EAAAA,GAAgB,eAAA/F,OAAc2C,EAAM4C,MAC5CS,IAAKrD,EAAM1C,KACXmB,QAAQ,aARb,KAaf,IAAK,SACD,OAAO1B,EAAAA,EAAAA,KAACZ,EAAY,CAACE,YAAa2D,IACtC,IAAK,OACD,OACIjD,EAAAA,EAAAA,KAACiG,EAAAA,GAAI,CAACC,GAAE,WAAA5F,OAAa2C,EAAM1C,MAAQ8E,UAAU,eAAclF,UACtDoG,EAAAA,EAAAA,GAAatD,EAAM1C,QAGhC,IAAK,YACD,OACIP,EAAAA,EAAAA,KAAA,QAAMqF,WA5DCmB,EA4DwBvD,EAAMG,IA3D9B,IAAZoD,EAAgB,wBAA0B,wBA2DKrG,SACvB,IAAd8C,EAAMG,IAAY,YAAc,aAG7C,IAAK,QACD,OAAOpD,EAAAA,EAAAA,KAAAyG,EAAAA,SAAA,CAAAtG,UA1FEkD,EA0FaJ,EAAMI,MAzFnB,aAAVA,EAAuB,WAAa,aA0FvC,IAAK,MACD,OAAOrD,EAAAA,EAAAA,KAAAyG,EAAAA,SAAA,CAAAtG,SAAGiE,EAAsBnB,EAAMzD,IAAKyD,EAAMS,OACrD,IAAK,MACD,OAAO1D,EAAAA,EAAAA,KAAAyG,EAAAA,SAAA,CAAAtG,SAAG8D,EAAgBhB,EAAMG,IAAKH,EAAMzD,IAAKyD,EAAMS,OAC1D,IAAK,SACD,OAAO1D,EAAAA,EAAAA,KAAAyG,EAAAA,SAAA,CAAAtG,SAAGiE,EAAsBnB,EAAMxD,OAAQwD,EAAMS,OACxD,IAAK,eACD,OACI7D,EAAAA,EAAAA,MAAA4G,EAAAA,SAAA,CAAAtG,SAAA,EACIH,EAAAA,EAAAA,KAAA,SAAOqF,UAAU,aAAYlF,SACxByD,EAAiBzB,EAAec,EAAMxD,OAAQwD,EAAMS,KAAMvB,EAAec,EAAMzD,IAAKyD,EAAMS,MAAM,MAErG1D,EAAAA,EAAAA,KAAA,OAAKqF,UAAU,WAAUlF,UACrBH,EAAAA,EAAAA,KAAA,OACIqF,UAAU,eACVS,MAAO,CAACC,MAAM,GAADzF,OAAKkC,EAAoBL,EAAec,EAAMxD,OAAQwD,EAAMS,KAAMvB,EAAec,EAAMzD,IAAKyD,EAAMS,MAAK,aAKxI,IAAK,SACD,OAAO1D,EAAAA,EAAAA,KAAA,OAAAG,UA5GKuG,EA4GgBC,OAAO1D,EAAM2D,QA3G1C,IAAIC,KAAKC,SAASC,OAAOL,KAAaM,eAAe,QAAS,CACjEC,KAAM,UACNC,MAAO,QACPC,IAAK,UACLC,KAAM,UACNC,OAAQ,UACRC,QAAQ,EACRC,aAAc,aAqGd,QACI,OAAOvH,EAAAA,EAAAA,KAAA,OAAAG,SAAM8C,EAAMvC,KA9GPgG,MAJHrD,EAyBEmD,CA0FnB,EAsEcgB,UAAW9F,EACX+F,SAAS,EACTC,eAAgB,UAEtB1H,EAAAA,EAAAA,KAAC2H,EAAAA,GAAM,CAAClG,KAAMhB,KACdT,EAAAA,EAAAA,KAAC4H,EAAAA,GAAG,CACA7H,MAAM,iBACN8H,YAAY,iEACZC,SAAS,kEAGd,C,kCCjUR,MAAMvB,EAAgBwB,IACsB,CAC3C,MAAS,QACT,OAAU,SACV,OAAU,SACV,OAAU,SACV,IAAO,MACP,KAAQ,OACR,OAAU,SACV,KAAQ,OACR,MAAS,QACT,OAAU,SACV,KAAQ,OACR,MAAS,QACT,KAAQ,OACR,MAAS,QACT,MAAS,QACT,OAAU,SACV,KAAQ,OACR,MAAS,QACT,IAAO,MACP,KAAQ,OACR,KAAQ,QAEUA,IAAWA,E","sources":["components/TokenActions.tsx","pages/TokenOverview.tsx","utils/censorTicker.ts"],"sourcesContent":["import React, {FC} from 'react'\nimport {TokenData} from \"../interfaces/TokenData\";\nimport {FaExchangeAlt} from \"react-icons/fa\";\nimport {CustomDropdownItem, IconDropdownButton} from \"nacho-component-library\";\n\ntype Props = {\n    tokenDetail: TokenData\n}\nexport const TokenActions: FC<Props> = (\n    {\n        tokenDetail\n    }\n) => {\n    const mintedOut = tokenDetail.max - tokenDetail.minted === 0\n\n    const openBot = () => {\n        window.open(`https://t.me/kspr_home_bot?start=nacho`, '_blank')\n    }\n    return <IconDropdownButton title={<FaExchangeAlt/>} theme={'header'}>\n        <CustomDropdownItem onClick={openBot}>\n            {`Trade ${tokenDetail.tick.toUpperCase()} on KSPR Bot`}\n        </CustomDropdownItem>\n        {!mintedOut && <CustomDropdownItem onClick={openBot}>\n            {`Mint ${tokenDetail.tick.toUpperCase()} on KSPR Bot`}\n        </CustomDropdownItem>}\n    </IconDropdownButton>\n\n}","import React, {FC, ReactElement, useMemo, useState} from 'react';\nimport 'styles/TokenOverview.css';\nimport {TokenData} from \"../interfaces/TokenData\";\nimport {\n    CustomDropdown,\n    CustomDropdownItem,\n    Input,\n    JsonLd,\n    List,\n    Page,\n    SEO,\n    SmallThumbnail,\n    useMobile\n} from \"nacho-component-library\";\nimport {Link} from \"react-router-dom\";\nimport {katscanStaticUrl} from \"../utils/StaticVariables\";\nimport {TokenActions} from \"../components/TokenActions\";\nimport {censorTicker} from \"../utils/censorTicker\";\nimport {formatNumber} from \"../services/Helper\";\nimport {useFetch} from \"../hooks/useFetch\";\nimport {cloneDeep} from \"lodash\";\n\nconst jsonLdData = {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"WebPage\",\n    \"name\": \"KRC-20 Tokens Overview | KatScan\",\n    \"description\": \"Overview of all KRC-20 tokens on the Kaspa blockchain.\",\n    \"url\": \"https://katscan.xyz/tokens\",\n};\ntype HeaderType = (keyof TokenData | 'image' | 'action' | 'mintState' | 'mintProgress')\n\nconst header: HeaderType[] = ['image', 'action', 'tick', 'mintState', 'state', 'max', 'pre', 'minted', 'mintProgress', 'mtsAdd']\n\nconst TokenOverview: FC = () => {\n    const {isMobile} = useMobile()\n    const [sortField, setSortField] = useState<keyof TokenData | ''>('');\n    const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('desc');\n    const [searchTerm, setSearchTerm] = useState('');\n    const [launchTypeFilter, setLaunchTypeFilter] = useState('');\n    const [statusFilter, setStatusFilter] = useState('');\n\n    const {data, loading} = useFetch<TokenData[]>({\n        url: '/token/tokenlist'\n    })\n\n    const handleSort = (field: keyof TokenData): void => {\n        if (field === sortField) {\n            setSortDirection(prevDirection => prevDirection === 'asc' ? 'desc' : 'asc');\n        } else {\n            setSortField(field);\n            setSortDirection('asc');\n        }\n    };\n\n    const handleLaunchTypeSelect = (eventKey: string): void => {\n        setLaunchTypeFilter(eventKey);\n    };\n\n    const handleStatusSelect = (eventKey: string): void => {\n        setStatusFilter(eventKey);\n    };\n\n    const calculateValue = (value: number, decimals: number): number => {\n        return value / Math.pow(10, decimals);\n    };\n\n    const calculatePercentage = (part: number, whole: number): number => {\n        return (part / whole) * 100;\n    };\n\n    const filteredAndSortedTokens = useMemo(() => {\n        if (data.length === 0) {\n            return []\n        }\n        let result = cloneDeep(data);\n\n        // Filter by search term\n        if (searchTerm) {\n            result = result.filter(token =>\n                token.tick.toLowerCase().includes(searchTerm.toLowerCase())\n            );\n        }\n\n        // Filter by launch type\n        if (launchTypeFilter) {\n            result = result.filter(token =>\n                (token.pre === 0 ? 'Fair Mint' : 'Pre-Mint') === launchTypeFilter\n            );\n        }\n\n        // Filter by status\n        if (statusFilter) {\n            result = result.filter(token =>\n                (token.state === 'finished' ? 'Complete' : 'Minting') === statusFilter\n            );\n        }\n\n        // Sort\n        if (sortField !== '') {\n            result.sort((a, b) => {\n                if (sortField === 'minted') {\n                    const aPercentage = calculatePercentage(calculateValue(a.minted, a.dec), calculateValue(a.max, a.dec));\n                    const bPercentage = calculatePercentage(calculateValue(b.minted, b.dec), calculateValue(b.max, b.dec));\n                    if (aPercentage < bPercentage) return sortDirection === 'asc' ? -1 : 1;\n                    if (aPercentage > bPercentage) return sortDirection === 'asc' ? 1 : -1;\n                    return 0;\n                } else {\n                    if (!a[sortField] || !b[sortField]) {\n                        return 0\n                    }\n                    if ((a[sortField] as number) < (b[sortField] as number)) {\n                        return sortDirection === 'asc' ? -1 : 1\n                    }\n                    if ((a[sortField] as number) > (b[sortField] as number)) {\n                        return sortDirection === 'asc' ? 1 : -1\n                    }\n\n                    return 0;\n                }\n            });\n        }\n\n        return result;\n    }, [data, launchTypeFilter, searchTerm, sortDirection, sortField, statusFilter]);\n\n    const formatState = (state: string): string => {\n        return state === 'finished' ? 'Complete' : 'Minting';\n    };\n\n    const formatDateTime = (timestamp: number): string => {\n        return new Date(parseInt(String(timestamp))).toLocaleString('en-US', {\n            year: '2-digit',\n            month: 'short',\n            day: 'numeric',\n            hour: '2-digit',\n            minute: '2-digit',\n            hour12: true,\n            timeZoneName: 'short'\n        });\n    };\n\n    const formatPercentage = (value: number, max: number, without?: boolean): string => {\n        const percentage = (value / max) * 100;\n        const formattedPercentage = percentage < 1 && percentage > 0 ? '<1' : Math.round(percentage);\n        if (without) {\n            return `${formattedPercentage}%`\n        }\n        return `(${formattedPercentage}%)`\n    };\n\n    const getBadgeClass = (preMint: number): string => {\n        return preMint === 0 ? 'badge badge-fair-mint' : 'badge badge-pre-mint';\n    };\n\n    const formatPreMinted = (preMinted: number, max: number, decimals: number): string => {\n        const value = calculateValue(preMinted, decimals);\n        if (value === 0) return \"None\";\n        return `${formatNumber(value)} ${formatPercentage(value, calculateValue(max, decimals))}`;\n    };\n\n    const formatLargeNumber = (value: number): string => {\n        const units = [\"\", \"Thousand\", \"Million\", \"Billion\", \"Trillion\", \"Quadrillion\", \"Quintillion\", \"Sextillion\", \"Septillion\", \"Octillion\", \"Nonillion\", \"Decillion\", \"Undecillion\", \"Duodecillion\", \"Tredecillion\", \"Quattuordecillion\", \"Quindecillion\", \"Sexdecillion\", \"Septendecillion\", \"Octodecillion\", \"Novemdecillion\", \"Vigintillion\"];\n        let unitIndex = 0;\n        let num = value;\n\n        while (num >= 1000 && unitIndex < units.length - 1) {\n            num /= 1000;\n            unitIndex++;\n        }\n\n        return `${num.toFixed(2)} ${units[unitIndex]}`.trim();\n    };\n\n    const formatNumberWithWords = (value: number, decimals: number): string => {\n        const integerPart = Math.floor(value / Math.pow(10, decimals));\n        if (integerPart.toString().length >= (isMobile ? 5 : 14)) {\n            return formatLargeNumber(integerPart);\n        }\n        return formatNumber(value / Math.pow(10, decimals));\n    };\n\n    const getElement = (header: string, token: TokenData & { id?: string }): ReactElement | null => {\n\n        const headerInternal = header as HeaderType;\n        switch (headerInternal) {\n            case \"image\":\n                if (!token.logo) {\n                    return null; // Return an empty div instead of null\n                }\n                return (\n                    <div style={{width: '30px', overflow: 'hidden'}}>\n                        <Link to={`/tokens/${token.tick}`} className=\"token-ticker\">\n                            <SmallThumbnail\n                                src={`${katscanStaticUrl}/thumbnails${token.logo}`}\n                                alt={token.tick}\n                                loading=\"lazy\"\n                            />\n                        </Link>\n                    </div>\n                );\n            case \"action\":\n                return <TokenActions tokenDetail={token}/>;\n            case \"tick\":\n                return (\n                    <Link to={`/tokens/${token.tick}`} className=\"token-ticker\">\n                        {censorTicker(token.tick)}\n                    </Link>\n                );\n            case \"mintState\":\n                return (\n                    <span className={getBadgeClass(token.pre)}>\n                        {token.pre === 0 ? 'Fair Mint' : 'Pre-Mint'}\n                    </span>\n                );\n            case \"state\":\n                return <>{formatState(token.state)}</>;\n            case 'max':\n                return <>{formatNumberWithWords(token.max, token.dec)}</>;\n            case 'pre':\n                return <>{formatPreMinted(token.pre, token.max, token.dec)}</>;\n            case 'minted':\n                return <>{formatNumberWithWords(token.minted, token.dec)}</>;\n            case 'mintProgress':\n                return (\n                    <>\n                        <small className=\"text-muted\">\n                            {formatPercentage(calculateValue(token.minted, token.dec), calculateValue(token.max, token.dec), true)}\n                        </small>\n                        <div className=\"progress\">\n                            <div\n                                className=\"progress-bar\"\n                                style={{width: `${calculatePercentage(calculateValue(token.minted, token.dec), calculateValue(token.max, token.dec))}%`}}\n                            ></div>\n                        </div>\n                    </>\n                );\n            case 'mtsAdd':\n                return <div>{formatDateTime(Number(token.mtsAdd))}</div>;\n            default:\n                return <div>{token[header as keyof TokenData]}</div>; // Ensure a ReactElement is always returned\n        }\n    };\n\n    const getHeader = (value: string): ReactElement | null => {\n        const h = value as HeaderType\n        switch (h) {\n            case 'image':\n            case \"action\":\n                return null\n            case 'tick':\n                return <div className=\"sticky-column cursor\"\n                            onClick={() => handleSort('tick')}>\n                    Ticker {sortField === 'tick' && (sortDirection === 'asc' ? '▲' : '▼')}\n                </div>\n            case 'mintState':\n                return <CustomDropdown title={'Launch Type'} theme={'header'}>\n                    <CustomDropdownItem onClick={() => handleLaunchTypeSelect(\"\")}>All</CustomDropdownItem>\n                    <CustomDropdownItem onClick={() => handleLaunchTypeSelect(\"Fair Mint\")}>Fair\n                        Mint</CustomDropdownItem>\n                    <CustomDropdownItem\n                        onClick={() => handleLaunchTypeSelect(\"Pre-Mint\")}>Pre-Mint</CustomDropdownItem>\n                </CustomDropdown>\n            case 'state':\n                return <CustomDropdown title={'Status'} theme={'header'}>\n                    <CustomDropdownItem onClick={() => handleStatusSelect(\"\")}>All</CustomDropdownItem>\n                    <CustomDropdownItem\n                        onClick={() => handleStatusSelect(\"Complete\")}>Complete</CustomDropdownItem>\n                    <CustomDropdownItem onClick={() => handleStatusSelect(\"Minting\")}>Minting</CustomDropdownItem>\n                </CustomDropdown>\n            case 'max':\n                return <div onClick={() => handleSort('max')}\n                            className={'cursor'}>\n                    Max Supply {sortField === 'max' && (sortDirection === 'asc' ? '▲' : '▼')}\n                </div>\n            case 'pre':\n                return <div onClick={() => handleSort('pre')}\n                            className={'cursor'}>\n                    Pre-Minted {sortField === 'pre' && (sortDirection === 'asc' ? '▲' : '▼')}\n                </div>\n            case 'minted':\n                return <div onClick={() => handleSort('minted')}\n                            className={'cursor'}>\n                    Total Minted {sortField === 'minted' && (sortDirection === 'asc' ? '▲' : '▼')}\n                </div>\n            case 'mintProgress':\n                return <div className=\"text-center\">Minting Progress</div>\n            case 'mtsAdd':\n                return <div onClick={() => handleSort('mtsAdd')}\n                            className={'cursor'}>\n                    Deployed On {sortField === 'mtsAdd' && (sortDirection === 'asc' ? '▲' : '▼')}\n                </div>\n            default:\n                return <div>{value}</div>\n        }\n    }\n\n    return (<Page header={'All KRC-20 Tokens'}\n                  additionalHeaderComponent={\n                      <Input customClass={'token-overview-search-form'}\n                             placeholder={'Search by ticker...'}\n                             onChangeCallback={setSearchTerm}\n                             onSubmit={setSearchTerm}/>\n                  }>\n            <div className=\"token-overview\">\n\n                <List headerElements={header}\n                      items={filteredAndSortedTokens}\n                      itemHeight={40}\n                      getHeader={getHeader}\n                      getElement={getElement}\n                      isLoading={loading}\n                      cssGrid={true}\n                      alternateIdKey={'tick'}\n                />\n                <JsonLd data={jsonLdData}/>\n                <SEO\n                    title=\"Token Overview\"\n                    description=\"Explore and analyze all KRC-20 tokens on the Kaspa blockchain.\"\n                    keywords=\"KRC-20, Kaspa, token overview, cryptocurrency, blockchain\"\n                />\n            </div>\n        </Page>\n    );\n};\n\nexport default TokenOverview;","export const censorTicker = (ticker: string): string => {\n    const offensiveWords: Record<string, string> = {\n        'NIGGA': 'N***A',\n        'NIGGAS': 'N****S',\n        'NIGGER': 'N****R',\n        'RETARD': 'R****D',\n        'FAG': 'F**',\n        'FAGS': 'F**S',\n        'FAGGOT': 'F****T',\n        'DYKE': 'D**E',\n        'DYKES': 'D**ES',\n        'TRANNY': 'T****Y',\n        'SPIC': 'S**C',\n        'SPICS': 'S**CS',\n        'KIKE': 'K**E',\n        'KIKES': 'K***S',\n        'CHINK': 'C***K',\n        'CHINKS': 'C***KS',\n        'GOOK': 'G**K',\n        'GOOKS': 'G**KS',\n        'WOP': 'W**',\n        'WOPS': 'W**S',\n        'TARD': 'T**D'\n    };\n    return offensiveWords[ticker] || ticker;\n};\n"],"names":["TokenActions","_ref","tokenDetail","mintedOut","max","minted","openBot","window","open","_jsxs","IconDropdownButton","title","_jsx","FaExchangeAlt","theme","children","CustomDropdownItem","onClick","concat","tick","toUpperCase","jsonLdData","header","TokenOverview","isMobile","useMobile","sortField","setSortField","useState","sortDirection","setSortDirection","searchTerm","setSearchTerm","launchTypeFilter","setLaunchTypeFilter","statusFilter","setStatusFilter","data","loading","useFetch","url","handleSort","field","prevDirection","handleLaunchTypeSelect","eventKey","handleStatusSelect","calculateValue","value","decimals","Math","pow","calculatePercentage","part","whole","filteredAndSortedTokens","useMemo","length","result","cloneDeep","filter","token","toLowerCase","includes","pre","state","sort","a","b","aPercentage","dec","bPercentage","formatPercentage","without","percentage","formattedPercentage","round","formatPreMinted","preMinted","formatNumber","formatNumberWithWords","integerPart","floor","toString","units","unitIndex","num","toFixed","trim","formatLargeNumber","Page","additionalHeaderComponent","Input","customClass","placeholder","onChangeCallback","onSubmit","className","List","headerElements","items","itemHeight","getHeader","CustomDropdown","getElement","logo","style","width","overflow","Link","to","SmallThumbnail","src","katscanStaticUrl","alt","censorTicker","preMint","_Fragment","timestamp","Number","mtsAdd","Date","parseInt","String","toLocaleString","year","month","day","hour","minute","hour12","timeZoneName","isLoading","cssGrid","alternateIdKey","JsonLd","SEO","description","keywords","ticker"],"sourceRoot":""}