{"version":3,"file":"static/js/342.73ee6058.chunk.js","mappings":"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","sources":["components/select/CustomSelect.tsx","pages/TokenComparison.tsx","services/dataService.ts","utils/censorTicker.ts"],"sourcesContent":["import React, {FC, FormEvent, MouseEvent, ReactElement, useCallback, useMemo, useRef, useState} from \"react\";\nimport {debounce} from \"lodash\";\nimport './CustomSelect.css'\nimport {FaChevronDown, FaX} from \"react-icons/fa6\";\nimport {CustomDropdown, CustomDropdownItem, DropdownRef} from \"nacho-component-library\";\n\nexport type Selection = { value: string | number, label: string } & Record<string, unknown>\ntype Props = {\n    data: Selection[]\n    hasSearch: boolean\n    onSelect: (value: Selection) => void\n    placeholder?: string\n}\n\nexport const CustomSelect: FC<Props> = (\n    {\n        data,\n        hasSearch,\n        onSelect,\n        placeholder\n    }\n) => {\n    const searchRef = useRef<HTMLDivElement | null>(null)\n    const [search, setSearch] = useState<string>('')\n    const [canClose, setCanClose] = useState(false)\n    const dropdownRef = useRef<DropdownRef>(null)\n\n    const changeDebounced = debounce((value: string) => setSearch(value), 10)\n\n    const clickCloseIcon = (e: MouseEvent<HTMLDivElement>) => {\n        e.stopPropagation()\n        e.preventDefault()\n        setCanClose(false)\n        dropdownRef.current?.close()\n    }\n\n    const input = useMemo((): ReactElement => {\n        return <>\n            <input type={'text'}\n                   className={'search-input'}\n                   placeholder={placeholder}\n                   onChange={hasSearch ? (e: FormEvent<HTMLInputElement>) => changeDebounced(e.currentTarget.value) : undefined}\n                   value={search}/>\n            <div className={'search-icon-wrapper'}>\n                {search !== '' &&\n                    <div className={'search-reset-wrapper'}\n                         onClick={() => setSearch('')}>\n                        <FaX size={15}/>\n                    </div>\n                }\n                <div className={'search-arrow-wrapper'}\n                     onClick={canClose ? clickCloseIcon : undefined}>\n                    <FaChevronDown className={'search-arrow'} size={15}/>\n                </div>\n            </div>\n        </>\n    }, [canClose, changeDebounced, hasSearch, placeholder, search])\n\n    const internalData = useMemo(() => {\n        if (hasSearch && search !== '') {\n            return data.filter(single => single.label.toUpperCase().includes(search.toUpperCase()))\n        }\n        return data\n    }, [data, hasSearch, search])\n\n    const onSelectInternal = (e: MouseEvent<HTMLDivElement>, selection: Selection) => {\n        e.preventDefault()\n        e.stopPropagation()\n        setSearch(selection.label)\n        onSelect(selection)\n        dropdownRef.current?.close()\n        console.log(selection)\n    }\n\n    const onOpen = useCallback(() => setCanClose(true), [])\n\n    return <div ref={searchRef} className={'custom-search-select'}>\n        <CustomDropdown title={input}\n                        stayOpen={true}\n                        fitHeader={true}\n                        onOpen={onOpen}\n                        className={'select-custom-dropdown'}\n                        ref={dropdownRef}>\n            {internalData.map((single, index) =>\n                <CustomDropdownItem key={index}\n                                    onClick={(e) => onSelectInternal(e, single)}>\n                    {single.label}\n                </CustomDropdownItem>)}\n            {internalData.length === 0 && <div className={'no-data'}>No Data</div>}\n        </CustomDropdown>\n    </div>\n}","/* eslint-disable */\n// @ts-nocheck\nimport React, {FC, useCallback, useEffect, useMemo, useRef, useState} from 'react';\nimport {Badge, Card, Col, Form, ProgressBar, Row} from 'react-bootstrap';\nimport {Bar} from 'react-chartjs-2';\nimport {\n    BarElement,\n    CategoryScale,\n    Chart as ChartJS,\n    Legend,\n    LinearScale,\n    LogarithmicScale,\n    Title,\n    Tooltip\n} from 'chart.js';\nimport {getTokenDetails} from '../services/dataService';\nimport 'styles/TokenComparison.css';\nimport {FaChartBar, FaChartPie, FaUsers} from 'react-icons/fa'; // Import icons\nimport {censorTicker} from '../utils/censorTicker';\nimport {JsonLd, LoadingSpinner, Page, SEO} from \"nacho-component-library\";\nimport {TokenData, TokenHolder} from \"../interfaces/TokenData\";\nimport {addAlert} from \"../components/alerts/Alerts\";\nimport {CustomSelect, Selection} from \"../components/select/CustomSelect\";\nimport {useFetch} from \"../hooks/useFetch\";\nimport {emptyArray} from \"../utils/StaticVariables\";\n\nChartJS.register(\n    CategoryScale,\n    LinearScale,\n    BarElement,\n    Title,\n    Tooltip,\n    Legend,\n    LogarithmicScale\n);\ntype TokenInternal = TokenHolder & {\n    top10HoldersPercentage: number\n    top50HoldersPercentage: number\n    totalHolders: number\n    hasHolderData: boolean\n}\n\nconst TOKEN_COLORS = {\n    token1: 'rgba(75, 192, 192, 0.6)',  // Teal\n    token2: 'rgba(255, 99, 132, 0.6)',  // Pink\n};\n\nconst HOLDER_GROUP_COLORS = {\n    top10: 'rgba(255, 99, 132, 0.6)',   // Red\n    top50: 'rgba(255, 206, 86, 0.6)',   // Yellow\n    others: 'rgba(75, 192, 192, 0.6)',  // Green\n};\n//todo refactor\nconst TokenComparison: FC = () => {\n    const [selectedTokens, setSelectedTokens] = useState<[Selection, Selection] | [null, null]>([null, null]);\n    const [tokenDetails, setTokenDetails] = useState<TokenInternal[]>([]);\n    const [compoareLoading, setCompareLoading] = useState(false)\n    const {data, loading, error} = useFetch<TokenData['tick'][]>({\n        url: '/token/tickers',\n        defaultValue: emptyArray\n    })\n\n    const supplyChartRef = useRef(null);\n    const holdersChartRef = useRef(null);\n\n    const calculateValue = useCallback((value: number, decimals: number) => {\n        if (value === undefined || decimals === undefined) {\n            console.warn('calculateValue received undefined value or decimals');\n            return 0;\n        }\n        return parseFloat(value.toString()) / Math.pow(10, parseInt(decimals.toString()));\n    }, []);\n\n    const calculateHolderPercentages = useCallback((token: TokenHolder) => {\n        if (!token.holder || !Array.isArray(token.holder) || token.holder.length === 0) {\n            console.warn(`No holder data for token: ${token.tick}`);\n            return {\n                top10HoldersPercentage: 0,\n                top50HoldersPercentage: 0,\n                totalHolders: parseInt(token.holderTotal) || 0,\n                hasHolderData: false\n            };\n        }\n\n        const totalSupply = calculateValue(token.minted, token.dec);\n        const sortedHolders = [...token.holder].sort((a, b) => parseInt(b.amount.toString()) - parseInt(a.amount.toString()));\n\n        const top10Amount = sortedHolders.slice(0, 10).reduce((sum, holder) => sum + calculateValue(holder.amount, token.dec), 0);\n        const top50Amount = sortedHolders.slice(0, 50).reduce((sum, holder) => sum + calculateValue(holder.amount, token.dec), 0);\n\n        const top10Percentage = (top10Amount / totalSupply) * 100;\n        const top50Percentage = (top50Amount / totalSupply) * 100;\n\n        return {\n            top10HoldersPercentage: top10Percentage,\n            top50HoldersPercentage: top50Percentage,\n            totalHolders: parseInt(token.holderTotal) || sortedHolders.length,\n            hasHolderData: true\n        };\n    }, [calculateValue]);\n\n    useEffect(() => {\n        if (!selectedTokens[0] || !selectedTokens[1]) {\n            return\n        }\n        const fetchTokenDetails = async () => {\n            setCompareLoading(true);\n            try {\n                const details = await Promise.all(selectedTokens.map(token => getTokenDetails(token.value as string)));\n                console.log('Raw token details:', details);\n                const processedDetails: TokenInternal[] = details.map(token => ({\n                    ...token.result,\n                    ...calculateHolderPercentages(token.result)\n                }));\n                console.log('Processed token details:', processedDetails);\n                setTokenDetails(processedDetails);\n            } catch (err) {\n                console.error('Error fetching token details:', err);\n                addAlert('error', `Failed to fetch token details: ${(err as Record<string, string>).message}`);\n                setTokenDetails([]);\n            }\n            setCompareLoading(false);\n        };\n\n        void fetchTokenDetails();\n    }, [selectedTokens, calculateHolderPercentages]);\n\n    const handleTokenSelect = (option, index) => {\n        setSelectedTokens(prev => {\n            const newSelected = [...prev];\n            newSelected[index] = option;\n            return newSelected;\n        });\n    };\n\n    const renderComparison = () => {\n        console.log('Rendering comparison, tokenDetails:', tokenDetails);\n\n        if (!tokenDetails[0] || !tokenDetails[1]) {\n            console.log('One or both tokens are missing');\n            return <p>Please select two tokens to compare.</p>;\n        }\n\n        const [token1, token2] = tokenDetails;\n\n        const calculateValue = (value, decimals) => {\n            if (value === undefined || decimals === undefined) return 0;\n            return parseFloat(value) / Math.pow(10, parseInt(decimals));\n        };\n\n        const formatNumber = (num: number): string => {\n            if (num === undefined || isNaN(num)) {\n                console.warn('formatNumber received invalid number:', num);\n                return 'N/A';\n            }\n            return num.toLocaleString();\n        };\n\n        const formatLargeNumber = (num: number): string => {\n            if (num >= 1e12) {\n                return (num / 1e12).toFixed(3) + ' T';\n            } else if (num >= 1e9) {\n                return (num / 1e9).toFixed(3) + ' B';\n            } else if (num >= 1e6) {\n                return (num / 1e6).toFixed(3) + ' M';\n            } else if (num >= 1e3) {\n                return (num / 1e3).toFixed(3) + ' K';\n            } else {\n                return num.toLocaleString();\n            }\n        };\n\n        const supplyData = {\n            labels: ['Max Supply', 'Minted', 'Pre-Minted'],\n            datasets: [\n                {\n                    label: censorTicker(token1.tick),\n                    data: [\n                        calculateValue(token1.max, token1.dec),\n                        calculateValue(token1.minted, token1.dec),\n                        calculateValue(token1.pre, token1.dec)\n                    ],\n                    backgroundColor: TOKEN_COLORS.token1,\n                },\n                {\n                    label: censorTicker(token2.tick),\n                    data: [\n                        calculateValue(token2.max, token2.dec),\n                        calculateValue(token2.minted, token2.dec),\n                        calculateValue(token2.pre, token2.dec)\n                    ],\n                    backgroundColor: TOKEN_COLORS.token2,\n                },\n            ],\n        };\n\n        const supplyOptions = {\n            responsive: true,\n            maintainAspectRatio: false,\n            scales: {\n                y: {\n                    type: 'logarithmic',\n                    ticks: {\n                        callback: function (value: number) {\n                            return formatLargeNumber(value);\n                        },\n                        maxTicksLimit: 8\n                    }\n                }\n            },\n            plugins: {\n                legend: {\n                    display: true,\n                    position: 'bottom',\n                },\n            },\n        };\n\n        const holdersData = {\n            labels: [censorTicker(token1.tick), censorTicker(token2.tick)],\n            datasets: [\n                {\n                    label: 'Top 10 Holders',\n                    data: [token1.top10HoldersPercentage || 0, token2.top10HoldersPercentage || 0],\n                    backgroundColor: HOLDER_GROUP_COLORS.top10,\n                },\n                {\n                    label: 'Top 11-50 Holders',\n                    data: [\n                        (token1.top50HoldersPercentage || 0) - (token1.top10HoldersPercentage || 0),\n                        (token2.top50HoldersPercentage || 0) - (token2.top10HoldersPercentage || 0)\n                    ],\n                    backgroundColor: HOLDER_GROUP_COLORS.top50,\n                },\n                {\n                    label: 'Other Holders',\n                    data: [\n                        100 - (token1.top50HoldersPercentage || 0),\n                        100 - (token2.top50HoldersPercentage || 0)\n                    ],\n                    backgroundColor: HOLDER_GROUP_COLORS.others,\n                },\n            ],\n        };\n\n        const holdersOptions = {\n            plugins: {\n                tooltip: {\n                    callbacks: {\n                        label: function (context) {\n                            let label = context.dataset.label || '';\n                            if (label) {\n                                label += ': ';\n                            }\n                            if (context.parsed.y !== null) {\n                                label += new Intl.NumberFormat('en-US', {\n                                    style: 'percent',\n                                    minimumFractionDigits: 2\n                                }).format(context.parsed.y / 100);\n                            }\n                            return label;\n                        }\n                    }\n                },\n                legend: {\n                    display: true,\n                    position: 'bottom',\n                },\n            },\n            responsive: true,\n            scales: {\n                x: {\n                    stacked: true,\n                    ticks: {\n                        font: {\n                            weight: 'bold'\n                        }\n                    }\n                },\n                y: {\n                    stacked: true,\n                    ticks: {\n                        callback: function (value: string) {\n                            return value + '%';\n                        }\n                    }\n                }\n            },\n        };\n\n        const getMintProgress = (token: TokenData) => {\n            const minted = calculateValue(token.minted, token.dec);\n            const max = calculateValue(token.max, token.dec);\n            return max > 0 ? (minted / max) * 100 : 0;\n        };\n\n        const getMintType = (token: TokenData) => {\n            return calculateValue(token.pre, token.dec) > 0 ? \"Pre-Mint\" : \"Fair Mint\";\n        };\n\n        return (\n            <Row>\n                <Col lg={6} className=\"mb-4\">\n                    <Card>\n                        <Card.Body>\n                            <Card.Title><FaChartBar/> Supply Comparison</Card.Title>\n                            <Bar data={supplyData} options={supplyOptions} ref={supplyChartRef}/>\n                        </Card.Body>\n                    </Card>\n                </Col>\n                <Col lg={6} className=\"mb-4\">\n                    <Card>\n                        <Card.Body>\n                            <Card.Title><FaUsers/> Holder Distribution</Card.Title>\n                            <Bar data={holdersData} options={holdersOptions} ref={holdersChartRef}/>\n                        </Card.Body>\n                    </Card>\n                </Col>\n                <Col md={12} className=\"mb-4 minting-progress-card\">\n                    <Card>\n                        <Card.Body>\n                            <Card.Title><FaChartPie/> Minting Progress</Card.Title>\n                            <div className=\"progress-wrapper mb-3\">\n                                <div className=\"progress-label\">\n                                    {censorTicker(token1.tick)} <Badge\n                                    bg={getMintType(token1) === \"Fair Mint\" ? \"success\" : \"warning\"}>{getMintType(token1)}</Badge>\n                                </div>\n                                <ProgressBar\n                                    now={getMintProgress(token1)}\n                                    label={`${getMintProgress(token1).toFixed(2)}%`}\n                                    variant=\"info\"\n                                />\n                            </div>\n                            <div className=\"progress-wrapper\">\n                                <div className=\"progress-label\">\n                                    {censorTicker(token2.tick)} <Badge\n                                    bg={getMintType(token2) === \"Fair Mint\" ? \"success\" : \"warning\"}>{getMintType(token2)}</Badge>\n                                </div>\n                                <ProgressBar\n                                    now={getMintProgress(token2)}\n                                    label={`${getMintProgress(token2).toFixed(2)}%`}\n                                    variant=\"success\"\n                                />\n                            </div>\n                        </Card.Body>\n                    </Card>\n                </Col>\n                <Col md={12}>\n                    <Card>\n                        <Card.Body>\n                            <Card.Title>Token Details</Card.Title>\n                            <table className=\"table\">\n                                <thead>\n                                <tr>\n                                    <th>Metric</th>\n                                    <th>{censorTicker(token1.tick)}</th>\n                                    <th>{censorTicker(token2.tick)}</th>\n                                </tr>\n                                </thead>\n                                <tbody>\n                                <tr>\n                                    <td>Max Supply</td>\n                                    <td>{formatNumber(calculateValue(token1.max, token1.dec))}</td>\n                                    <td>{formatNumber(calculateValue(token2.max, token2.dec))}</td>\n                                </tr>\n                                <tr>\n                                    <td>Minted</td>\n                                    <td>{formatNumber(calculateValue(token1.minted, token1.dec))}</td>\n                                    <td>{formatNumber(calculateValue(token2.minted, token2.dec))}</td>\n                                </tr>\n                                <tr>\n                                    <td>Pre-Minted</td>\n                                    <td>{formatNumber(calculateValue(token1.pre, token1.dec))}</td>\n                                    <td>{formatNumber(calculateValue(token2.pre, token2.dec))}</td>\n                                </tr>\n                                <tr>\n                                    <td>Total Holders</td>\n                                    <td>{formatNumber(token1.holderTotal)}</td>\n                                    <td>{formatNumber(token2.holderTotal)}</td>\n                                </tr>\n                                <tr>\n                                    <td>Top 10 Holders %</td>\n                                    <td>{(token1.top10HoldersPercentage || 0).toFixed(2)}%</td>\n                                    <td>{(token2.top10HoldersPercentage || 0).toFixed(2)}%</td>\n                                </tr>\n                                <tr>\n                                    <td>Top 50 Holders %</td>\n                                    <td>{(token1.top50HoldersPercentage || 0).toFixed(2)}%</td>\n                                    <td>{(token2.top50HoldersPercentage || 0).toFixed(2)}%</td>\n                                </tr>\n                                </tbody>\n                            </table>\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n        );\n    };\n\n    useEffect(() => {\n        const supplyChart = supplyChartRef.current;\n        const holdersChart = holdersChartRef.current;\n\n        return () => {\n            if (supplyChart) {\n                supplyChart.destroy();\n            }\n            if (holdersChart) {\n                holdersChart.destroy();\n            }\n        };\n    }, []);\n\n    const searchValues = useMemo((): Selection[] =>\n            data.map(token => ({value: token, label: censorTicker(token)}))\n        , [data])\n\n    return (\n        <Page header={'Compare KRC20 Tokens'}>\n            <div className=\"token-comparison\">\n                <SEO\n                    title=\"Token Comparison\"\n                    description=\"Compare KRC-20 tokens on the Kaspa blockchain side by side, analyzing key metrics and holder distributions.\"\n                    keywords=\"KRC-20, Kaspa, token comparison, cryptocurrency analysis\"\n                />\n                <JsonLd\n                    data={{\n                        \"@context\": \"https://schema.org\",\n                        \"@type\": \"WebApplication\",\n                        \"name\": \"KatScan Token Comparison\",\n                        \"description\": \"Compare KRC-20 tokens on the Kaspa blockchain side by side, analyzing key metrics and holder distributions.\",\n                        \"url\": \"https://katscan.xyz/compare\"\n                    }}\n                />\n                <Row className=\"mb-4\">\n                    <Col md={6}>\n                        <Form.Group>\n                            <Form.Label>Select Token 1</Form.Label>\n                            <CustomSelect placeholder={\"Search for a token...\"} data={searchValues} hasSearch={true}\n                                          onSelect={(option) => handleTokenSelect(option, 0)}/>\n                        </Form.Group>\n                    </Col>\n                    <Col md={6}>\n                        <Form.Group>\n                            <Form.Label>Select Token 2</Form.Label>\n                            <CustomSelect placeholder={\"Search for a token...\"} data={searchValues} hasSearch={true}\n                                          onSelect={(option) => handleTokenSelect(option, 1)}/>\n                        </Form.Group>\n                    </Col>\n                </Row>\n                {loading && <LoadingSpinner useFlexHeight={true}/>}\n                {!compoareLoading && !error && tokenDetails[0] && tokenDetails[1] && renderComparison()}\n            </div>\n        </Page>\n    );\n};\n\nexport default TokenComparison;\n","import {TokenData, TokenHolder} from \"../interfaces/TokenData\";\nimport {sendRequest, simpleRequest} from \"nacho-component-library\";\nimport {\n    KatscanResponse,\n    KatscanTokenListResponse,\n    ResultResponse,\n    TokenListResponse\n} from \"../interfaces/ApiResponseTypes\";\nimport {OpTransactionData} from \"../interfaces/OpTransactionData\";\nimport {katscanApiUrl} from \"../utils/StaticVariables\";\n\nconst BASE_URL = 'https://api.kasplex.org/v1';\n\n// Simulating an API call to fetch token details\nexport const getTokenDetails = async (tick: string): Promise<KatscanResponse<TokenHolder>> => {\n    try {\n        return await simpleRequest<KatscanResponse<TokenHolder>>(`${katscanApiUrl}/token/detail/${tick}`)\n    } catch (error) {\n        console.error('Error fetching token details:', error);\n        throw error;\n    }\n};\n\n// New function to fetch KRC-20 token list\nexport const getKRC20TokenList = async (limit = 100, sortField = 'holderTotal', sortDirection = 'desc'): Promise<{\n    result: TokenData[]\n}> => {\n    let allTokens: TokenData[] = [];\n    let cursor = null;\n\n    do {\n        const params: Record<string, string | number> = {\n            limit,\n            sortBy: sortField,\n            sortOrder: sortDirection,\n            ...(cursor && {cursor: cursor})\n        };\n\n        try {\n            const response = await sendRequest<KatscanTokenListResponse<TokenData[]>>({\n                method: 'GET',\n                url: `${katscanApiUrl}/token/tokenlist`,\n                params\n            });\n            allTokens = [...allTokens, ...response.result];\n            cursor = response.nextCursor;\n        } catch (error) {\n            console.error('Error fetching KRC20 token list:', error);\n            throw new Error(`Failed to fetch token list: ${(error as Record<string, string>).message}`);\n        }\n    } while (cursor);\n\n    return {result: allTokens};\n};\n\n// New function to fetch KRC-20 token list\nexport const getKRC20TokenListSequential = async (limit = 100, sortField = 'holderTotal', sortDirection = 'desc', cursor: string | null): Promise<{\n    result: TokenData[], cursor: string\n}> => {\n    const params: Record<string, string | number> = {\n        limit,\n        sortBy: sortField || 'holderTotal',\n        sortOrder: sortDirection || 'desc',\n        ...(cursor && {cursor: cursor})\n    };\n\n    try {\n        const response = await sendRequest<KatscanTokenListResponse<TokenData>>({\n            method: 'GET',\n            url: `${katscanApiUrl}/token/tokenlist`,\n            params\n        });\n        return {result: response.tokens, cursor: response.nextCursor}\n        // cursor = response.next;\n    } catch (error) {\n        console.error('Error fetching KRC20 token list:', error);\n        throw new Error(`Failed to fetch token list: ${(error as Record<string, string>).message}`);\n    }\n    // } while (cursor);\n\n\n};\n\n// New function to fetch token operations\nexport const getTokenOperations = async (tick: string, limit = 50, cursor: null | number = null): Promise<TokenListResponse<OpTransactionData[]>> => {\n    try {\n        const params: Record<string, string | number> = {tick, limit: limit.toString()}\n        if (cursor) params['next'] = cursor\n        return sendRequest<TokenListResponse<OpTransactionData[]>>({\n            method: 'GET', url: `${BASE_URL}/krc20/oplist`, params\n        });\n    } catch (error) {\n        console.error('Error fetching token operations:', error);\n        throw error;\n    }\n};\n\n// New function to fetch mint operations\nexport const getMintOperations = async (tick: string, limit = 50, cursor = null): Promise<OpTransactionData[]> => {\n    try {\n        const params: Record<string, string> = {tick, limit: limit.toString(), op: 'mint'}\n        if (cursor) params['next'] = cursor\n        const response = await sendRequest<TokenListResponse<OpTransactionData[]>>({\n            method: 'GET',\n            url: `${BASE_URL}/krc20/oplist`,\n            params\n        });\n        return response.result;\n    } catch (error) {\n        console.error('Error fetching mint operations:', error);\n        throw error;\n    }\n};\n\n// Add this new function to fetch detailed token information\nexport const getDetailedTokenInfo = async (tick: string): Promise<TokenData> => {\n    try {\n        const response = await simpleRequest<ResultResponse<TokenData>>(`${katscanApiUrl}/token/detail/${tick}`);\n        return response.result;\n    } catch (error) {\n        console.error('Error fetching detailed token information:', error);\n        throw error;\n    }\n};\n\n// Add this new function to fetch all mint transactions\n// todo invalid url params / more needed\n// export const getAllMintTransactions = async () => {\n//     const BASE_URL = 'https://katapi.nachowyborski.xyz/api';\n//     let allTransactions = [];\n//     let currentPage = 1;\n//     let hasNextPage = true;\n//\n//     while (hasNextPage) {\n//         try {\n//             const response = await sendRequest({\n//                     method: 'GET',\n//                     url: `${BASE_URL}/transactions`,\n//                     params: {op: 'mint', page: currentPage}\n//                 }\n//             );\n//\n//             const {transactions, pagination} = response.data;\n//             allTransactions = [...allTransactions, ...transactions];\n//\n//             hasNextPage = pagination.hasNextPage;\n//             currentPage++;\n//         } catch (error) {\n//             console.error('Error fetching mint transactions:', error);\n//             throw error;\n//         }\n//     }\n//\n//     return allTransactions;\n// };\n","export const censorTicker = (ticker: string): string => {\n    const offensiveWords: Record<string, string> = {\n        'NIGGA': 'N***A',\n        'NIGGAS': 'N****S',\n        'NIGGER': 'N****R',\n        'RETARD': 'R****D',\n        'FAG': 'F**',\n        'FAGS': 'F**S',\n        'FAGGOT': 'F****T',\n        'DYKE': 'D**E',\n        'DYKES': 'D**ES',\n        'TRANNY': 'T****Y',\n        'SPIC': 'S**C',\n        'SPICS': 'S**CS',\n        'KIKE': 'K**E',\n        'KIKES': 'K***S',\n        'CHINK': 'C***K',\n        'CHINKS': 'C***KS',\n        'GOOK': 'G**K',\n        'GOOKS': 'G**KS',\n        'WOP': 'W**',\n        'WOPS': 'W**S',\n        'TARD': 'T**D'\n    };\n    return offensiveWords[ticker] || ticker;\n};\n"],"names":["CustomSelect","_ref","data","hasSearch","onSelect","placeholder","searchRef","useRef","search","setSearch","useState","canClose","setCanClose","dropdownRef","changeDebounced","debounce","value","clickCloseIcon","e","_dropdownRef$current","stopPropagation","preventDefault","current","close","input","useMemo","_jsxs","_Fragment","children","_jsx","type","className","onChange","currentTarget","undefined","onClick","FaX","size","FaChevronDown","internalData","filter","single","label","toUpperCase","includes","onOpen","useCallback","ref","CustomDropdown","title","stayOpen","fitHeader","map","index","CustomDropdownItem","onSelectInternal","selection","_dropdownRef$current2","console","log","length","ChartJS","register","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","LogarithmicScale","TOKEN_COLORS","HOLDER_GROUP_COLORS","TokenComparison","selectedTokens","setSelectedTokens","tokenDetails","setTokenDetails","compoareLoading","setCompareLoading","loading","error","useFetch","url","defaultValue","emptyArray","supplyChartRef","holdersChartRef","calculateValue","decimals","warn","parseFloat","toString","Math","pow","parseInt","calculateHolderPercentages","token","holder","Array","isArray","concat","tick","top10HoldersPercentage","top50HoldersPercentage","totalHolders","holderTotal","hasHolderData","totalSupply","minted","dec","sortedHolders","sort","a","b","amount","slice","reduce","sum","useEffect","async","details","Promise","all","getTokenDetails","processedDetails","_objectSpread","result","err","addAlert","message","fetchTokenDetails","handleTokenSelect","option","prev","newSelected","supplyChart","holdersChart","destroy","searchValues","censorTicker","Page","header","SEO","description","keywords","JsonLd","Row","Col","md","Form","Group","Label","LoadingSpinner","useFlexHeight","renderComparison","token1","token2","formatNumber","num","isNaN","toLocaleString","supplyData","labels","datasets","max","pre","backgroundColor","supplyOptions","responsive","maintainAspectRatio","scales","y","ticks","callback","toFixed","maxTicksLimit","plugins","legend","display","position","holdersData","holdersOptions","tooltip","callbacks","context","dataset","parsed","Intl","NumberFormat","style","minimumFractionDigits","format","x","stacked","font","weight","getMintProgress","getMintType","lg","Card","Body","FaChartBar","Bar","options","FaUsers","FaChartPie","Badge","bg","ProgressBar","now","variant","BASE_URL","simpleRequest","katscanApiUrl","getTokenOperations","limit","arguments","cursor","params","sendRequest","method","getDetailedTokenInfo","ticker"],"sourceRoot":""}