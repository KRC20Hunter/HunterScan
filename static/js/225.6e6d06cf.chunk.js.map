{"version":3,"file":"static/js/225.6e6d06cf.chunk.js","mappings":"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","sources":["components/select/CustomSelect.tsx","services/coingeckoService.ts","pages/MarketCapCalculator.tsx","services/dataService.ts","utils/censorTicker.ts"],"sourcesContent":["import React, {FC, FormEvent, MouseEvent, ReactElement, useCallback, useMemo, useRef, useState} from \"react\";\nimport {debounce} from \"lodash\";\nimport './CustomSelect.css'\nimport {FaChevronDown, FaX} from \"react-icons/fa6\";\nimport {CustomDropdown, CustomDropdownItem, DropdownRef} from \"nacho-component-library\";\n\nexport type Selection = { value: string | number, label: string } & Record<string, unknown>\ntype Props = {\n    data: Selection[]\n    hasSearch: boolean\n    onSelect: (value: Selection) => void\n    placeholder?: string\n}\n\nexport const CustomSelect: FC<Props> = (\n    {\n        data,\n        hasSearch,\n        onSelect,\n        placeholder\n    }\n) => {\n    const searchRef = useRef<HTMLDivElement | null>(null)\n    const [search, setSearch] = useState<string>('')\n    const [canClose, setCanClose] = useState(false)\n    const dropdownRef = useRef<DropdownRef>(null)\n\n    const changeDebounced = debounce((value: string) => setSearch(value), 10)\n\n    const clickCloseIcon = (e: MouseEvent<HTMLDivElement>) => {\n        e.stopPropagation()\n        e.preventDefault()\n        setCanClose(false)\n        dropdownRef.current?.close()\n    }\n\n    const input = useMemo((): ReactElement => {\n        return <>\n            <input type={'text'}\n                   className={'search-input'}\n                   placeholder={placeholder}\n                   onChange={hasSearch ? (e: FormEvent<HTMLInputElement>) => changeDebounced(e.currentTarget.value) : undefined}\n                   value={search}/>\n            <div className={'search-icon-wrapper'}>\n                {search !== '' &&\n                    <div className={'search-reset-wrapper'}\n                         onClick={() => setSearch('')}>\n                        <FaX size={15}/>\n                    </div>\n                }\n                <div className={'search-arrow-wrapper'}\n                     onClick={canClose ? clickCloseIcon : undefined}>\n                    <FaChevronDown className={'search-arrow'} size={15}/>\n                </div>\n            </div>\n        </>\n    }, [canClose, changeDebounced, hasSearch, placeholder, search])\n\n    const internalData = useMemo(() => {\n        if (hasSearch && search !== '') {\n            return data.filter(single => single.label.toUpperCase().includes(search.toUpperCase()))\n        }\n        return data\n    }, [data, hasSearch, search])\n\n    const onSelectInternal = (e: MouseEvent<HTMLDivElement>, selection: Selection) => {\n        e.preventDefault()\n        e.stopPropagation()\n        setSearch(selection.label)\n        onSelect(selection)\n        dropdownRef.current?.close()\n        console.log(selection)\n    }\n\n    const onOpen = useCallback(() => setCanClose(true), [])\n\n    return <div ref={searchRef} className={'custom-search-select'}>\n        <CustomDropdown title={input}\n                        stayOpen={true}\n                        fitHeader={true}\n                        onOpen={onOpen}\n                        className={'select-custom-dropdown'}\n                        ref={dropdownRef}>\n            {internalData.map((single, index) =>\n                <CustomDropdownItem key={index}\n                                    onClick={(e) => onSelectInternal(e, single)}>\n                    {single.label}\n                </CustomDropdownItem>)}\n            {internalData.length === 0 && <div className={'no-data'}>No Data</div>}\n        </CustomDropdown>\n    </div>\n}","\nimport {CoinbaseInfo} from \"../interfaces/CoinbaseInfo\";\nimport {sendHeadRequest} from \"nacho-component-library\";\n\nconst COINGECKO_API_URL = 'https://api.coingecko.com/api/v3';\nconst API_KEY = 'CG-f8E4yaD4zQYKtqHawS59TAnY';\n\nconst headers = {\n    'accept': 'application/json',\n    'x-cg-demo-api-key': API_KEY\n}\n\ntype Crypto = { id: string, name: string, symbol: string }\nexport type CryptoSearch = { value: string, label: string } & Crypto\nexport const searchCryptos = async (query: string): Promise<CryptoSearch[]> => {\n    try {\n        const response = await sendHeadRequest<{ coins: Crypto[] }>({\n            method: 'GET',\n            url: `${COINGECKO_API_URL}/search`,\n            params: {query},\n            headers\n        });\n        return response.coins.map((coin: Crypto) => ({\n            value: coin.id,\n            label: `${coin.name} (${coin.symbol.toUpperCase()})`,\n            ...coin\n        }));\n    } catch (error) {\n        console.error('Error searching cryptocurrencies:', error);\n        throw error;\n    }\n};\n\nexport const getCryptoData = async (id: string) :Promise<CoinbaseInfo> => {\n    try {\n        return sendHeadRequest<CoinbaseInfo>({method: 'GET', url: `${COINGECKO_API_URL}/coins/${id}`, params: undefined, headers});\n    } catch (error) {\n        console.error('Error fetching cryptocurrency data:', error);\n        throw error;\n    }\n};\n","import React, {FC, useEffect, useState} from 'react';\nimport {Button, Card, Col, Container, Form, Row} from 'react-bootstrap';\nimport {useNavigate} from 'react-router-dom';\nimport AsyncSelect from 'react-select/async';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {\n    faChartLine,\n    faCoins,\n    faDollarSign,\n    faExternalLinkAlt,\n    faInfoCircle,\n    faUsers\n} from '@fortawesome/free-solid-svg-icons';\nimport {getDetailedTokenInfo} from '../services/dataService';\nimport {CryptoSearch, getCryptoData, searchCryptos} from '../services/coingeckoService';\nimport 'styles/MarketCapCalculator.css';\nimport {censorTicker} from '../utils/censorTicker';\nimport {TokenData} from \"../interfaces/TokenData\";\nimport {CoinbaseInfo} from \"../interfaces/CoinbaseInfo\";\nimport {formatInteger, formatNumber} from \"../services/Helper\";\nimport {JsonLd, LoadingSpinner, NormalCard, Page, SEO} from \"nacho-component-library\";\nimport {addAlert} from \"../components/alerts/Alerts\";\nimport {useFetch} from \"../hooks/useFetch\";\nimport {CustomSelect, Selection} from \"../components/select/CustomSelect\";\n\ntype CalculationResult = {\n    krc20Token: {\n        holderTotal: number\n    } & TokenData,\n    crypto: {\n        maxSupply: CoinbaseInfo['market_data']['max_supply'],\n        marketCap: CoinbaseInfo['market_data']['market_cap']['usd'],\n        currentPrice: CoinbaseInfo['market_data']['current_price']['usd']\n    } & CryptoSearch & CoinbaseInfo,\n    calculatedPrice: number\n    krc20Supply: number\n    cryptoMarketCap: number\n}\n\ntype InternalKRC20 = {\n    value: string\n    label: string\n    tick: string\n}\n\nconst jsonData = {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"WebApplication\",\n    \"name\": \"KatScan Market Cap Calculator\",\n    \"description\": \"Calculate and compare market caps of KRC-20 tokens on the Kaspa network.\",\n    \"url\": \"https://katscan.xyz/marketcap-calc\"\n}\nconst MarketCapCalculator: FC = () => {\n\n    const [krc20List, setKrc20List] = useState<InternalKRC20[]>([]);\n    const [selectedKrc20Token, setSelectedKrc20Token] = useState<Selection | null>(null);\n    const [selectedCrypto, setSelectedCrypto] = useState<CryptoSearch | null>(null);\n    const [calculationResult, setCalculationResult] = useState<CalculationResult | null>(null);\n    const [isLoading, setIsLoading] = useState(false);\n    const [detailedTokenInfo, setDetailedTokenInfo] = useState<TokenData | null>(null);\n    const {data} = useFetch<TokenData['tick'][]>({\n        url: '/token/tickers'\n    })\n\n    const navigate = useNavigate();\n    useEffect(() => {\n        if (!data || data.length === 0) {\n            return\n        }\n        setKrc20List(data.map(token => ({\n            value: token,\n            label: censorTicker(token),\n            tick: token\n        })))\n    }, [data]);\n\n    const handleCryptoSearch = async (inputValue: string): Promise<CryptoSearch[]> => {\n        if (inputValue.length > 1) {\n            try {\n                return await searchCryptos(inputValue);\n            } catch (error) {\n                console.error('Error searching cryptocurrencies:', error);\n                return [];\n            }\n        }\n        return [];\n    };\n\n    useEffect(() => {\n        if (!selectedKrc20Token) {\n            return\n        }\n        const fetchDetailedTokenInfo = async (tick: string) => {\n            try {\n                const data = await getDetailedTokenInfo(tick);\n                setDetailedTokenInfo(data);\n            } catch (error) {\n                console.error('Error fetching detailed token info:', error);\n            }\n        }\n        void fetchDetailedTokenInfo(selectedKrc20Token.value as string);\n\n    }, [selectedKrc20Token]);\n\n    useEffect(() => {\n        if (selectedKrc20Token && selectedCrypto && detailedTokenInfo) {\n            setIsLoading(true);\n            const load = async () => {\n                try {\n                    const cryptoData = await getCryptoData(selectedCrypto.value);\n                    const krc20Supply = detailedTokenInfo.max / Math.pow(10, detailedTokenInfo.dec);\n                    const cryptoMarketCap = cryptoData.market_data.market_cap.usd;\n                    const calculatedPrice = cryptoMarketCap / krc20Supply;\n\n                    setCalculationResult({\n                        krc20Token: {\n                            ...detailedTokenInfo,\n                            holderTotal: detailedTokenInfo.holderTotal\n                        },\n                        crypto: {\n                            ...selectedCrypto,\n                            ...cryptoData,\n                            maxSupply: cryptoData.market_data.max_supply,\n                            marketCap: cryptoMarketCap,\n                            currentPrice: cryptoData.market_data.current_price.usd\n                        },\n                        calculatedPrice,\n                        krc20Supply,\n                        cryptoMarketCap\n                    });\n                } catch (error) {\n                    console.error('Error calculating market cap:', error);\n                    addAlert('error', 'Failed to calculate market cap. Please try again.');\n                } finally {\n                    setIsLoading(false);\n                }\n            }\n            void load()\n        }\n\n    }, [detailedTokenInfo, selectedCrypto, selectedKrc20Token]);\n\n    const handleKRC20DetailClick = (): void => {\n        if (calculationResult && calculationResult.krc20Token) {\n            navigate(`/tokens/${calculationResult.krc20Token.tick}`);\n        }\n    };\n\n    const handleCoinGeckoClick = (): void => {\n        if (calculationResult && calculationResult.crypto) {\n            window.open(`https://www.coingecko.com/en/coins/${calculationResult.crypto.id}`, '_blank');\n        }\n    };\n\n    return (\n        <Page header={'MarketCap Calculator'}>\n            <Container fluid className=\"market-cap-calculator\">\n                <SEO title=\"Market Cap Calculator\"\n                     description=\"Calculate and compare market caps of KRC-20 tokens on the Kaspa network.\"\n                     keywords=\"KRC-20, Kaspa, market cap, calculator, cryptocurrency\"/>\n                <JsonLd data={jsonData}/>\n                <Row className=\"justify-content-center\">\n                    <Col md={10} lg={8}>\n                        <Row className=\"mb-4\">\n                            <Col md={6}>\n                                <Form.Group>\n                                    <Form.Label>Select KRC20 Token</Form.Label>\n                                    <CustomSelect placeholder={\"Select KRC20 Token\"}\n                                                  data={krc20List}\n                                                  hasSearch={true}\n                                                  onSelect={setSelectedKrc20Token}/>\n                                </Form.Group>\n                            </Col>\n                            <Col md={6}>\n                                <Form.Group>\n                                    <Form.Label>Select Cryptocurrency</Form.Label>\n                                    <AsyncSelect\n                                        cacheOptions\n                                        loadOptions={handleCryptoSearch}\n                                        onChange={setSelectedCrypto}\n                                        placeholder=\"Start typing a cryptocurrency on CoinGecko\"\n                                    />\n                                </Form.Group>\n                            </Col>\n                        </Row>\n                        {isLoading && (\n                            <LoadingSpinner/>\n                        )}\n                        {calculationResult && (\n                            <div className=\"calculation-result\">\n                                <h4 className=\"text-center mb-4\">Calculation Result</h4>\n                                <Row>\n                                    <Col md={6} className=\"mb-4\">\n                                        <Card className=\"h-100 token-card krc20-card\">\n                                            <Card.Body>\n                                                <h5 className=\"text-center\">{censorTicker(calculationResult.krc20Token.tick)} (KRC20\n                                                    Token)</h5>\n                                                <ul className=\"list-unstyled\">\n                                                    <li className=\"d-flex justify-content-between align-items-center mb-2\">\n                                                            <span><FontAwesomeIcon icon={faCoins}\n                                                                                   className=\"me-2 text-primary\"/> Max Supply:</span>\n                                                        <strong>{formatNumber(calculationResult.krc20Supply)}</strong>\n                                                    </li>\n                                                    <li className=\"d-flex justify-content-between align-items-center mb-2\">\n                                                            <span><FontAwesomeIcon icon={faUsers}\n                                                                                   className=\"me-2 text-primary\"/> Total Holders:</span>\n                                                        <strong>{formatInteger(calculationResult.krc20Token.holderTotal)}</strong>\n                                                    </li>\n                                                    <li className=\"d-flex justify-content-between align-items-center\">\n                                                            <span><FontAwesomeIcon icon={faChartLine}\n                                                                                   className=\"me-2 text-primary\"/> Total Minted:</span>\n                                                        <strong>{formatNumber(calculationResult.krc20Token.minted / Math.pow(10, calculationResult.krc20Token.dec || 0))}</strong>\n                                                    </li>\n                                                </ul>\n                                                <div className=\"text-center mt-3\">\n                                                    <Button\n                                                        variant=\"primary\"\n                                                        onClick={handleKRC20DetailClick}\n                                                        className=\"details-button\"\n                                                    >\n                                                        <FontAwesomeIcon icon={faExternalLinkAlt} className=\"me-2\"/>\n                                                        {censorTicker(calculationResult.krc20Token.tick)} Details\n                                                    </Button>\n                                                </div>\n                                            </Card.Body>\n                                        </Card>\n                                    </Col>\n                                    <Col md={6} className=\"mb-4\">\n                                        <Card className=\"h-100 token-card coingecko-card\">\n                                            <Card.Body>\n                                                <h5 className=\"text-center\">{calculationResult.crypto.symbol.toUpperCase()} (CoinGecko)</h5>\n                                                <ul className=\"list-unstyled\">\n                                                    <li className=\"d-flex justify-content-between align-items-center mb-2\">\n                                                            <span><FontAwesomeIcon icon={faCoins}\n                                                                                   className=\"me-2 text-success\"/> Max Supply:</span>\n                                                        <strong>{calculationResult.crypto.maxSupply ? formatNumber(calculationResult.crypto.maxSupply) : 'N/A'}</strong>\n                                                    </li>\n                                                    <li className=\"d-flex justify-content-between align-items-center mb-2\">\n                                                            <span><FontAwesomeIcon icon={faDollarSign}\n                                                                                   className=\"me-2 text-success\"/> Current Price:</span>\n                                                        <strong>${formatNumber(calculationResult.crypto.currentPrice, 6)}</strong>\n                                                    </li>\n                                                    <li className=\"d-flex justify-content-between align-items-center\">\n                                                            <span><FontAwesomeIcon icon={faChartLine}\n                                                                                   className=\"me-2 text-success\"/> Market Cap:</span>\n                                                        <strong>${formatNumber(calculationResult.crypto.marketCap)}</strong>\n                                                    </li>\n                                                </ul>\n                                                <div className=\"text-center mt-3\">\n                                                    <Button\n                                                        variant=\"success\"\n                                                        onClick={handleCoinGeckoClick}\n                                                        className=\"details-button\"\n                                                    >\n                                                        <FontAwesomeIcon icon={faExternalLinkAlt} className=\"me-2\"/>\n                                                        {calculationResult.crypto.symbol.toUpperCase()} Details\n                                                    </Button>\n                                                </div>\n                                            </Card.Body>\n                                        </Card>\n                                    </Col>\n                                </Row>\n                                <NormalCard\n                                    title={`Hypothetical ${censorTicker(calculationResult.krc20Token.tick)} Price`}\n                                    titleProps={{className: \"mt-4 text-center fw-bold\"}}>\n                                    <Card.Body className=\"text-center\">\n                                        <h5></h5>\n                                        <p className=\"lead mb-3\">\n                                            {`If ${censorTicker(calculationResult.krc20Token.tick)} had ${calculationResult.crypto.symbol.toUpperCase()}'s\n                                        market cap:`}\n                                        </p>\n                                        <h3 className=\"text-success price-highlight mb-3\">\n                                            <FontAwesomeIcon icon={faDollarSign} className=\"me-2\"/>\n                                            {formatNumber(calculationResult.calculatedPrice, 6)}\n                                        </h3>\n                                        <p className=\"text-muted disclaimer mb-0\">\n                                            <FontAwesomeIcon icon={faInfoCircle} className=\"me-2\"/>\n                                            This is a hypothetical price based on current market conditions and\n                                            should not be considered as financial advice.\n                                        </p>\n                                    </Card.Body>\n                                </NormalCard>\n                            </div>\n                        )}\n                    </Col>\n                </Row>\n            </Container>\n        </Page>\n    );\n};\n\nexport default MarketCapCalculator;\n","import {TokenData, TokenHolder} from \"../interfaces/TokenData\";\nimport {sendRequest, simpleRequest} from \"nacho-component-library\";\nimport {\n    KatscanResponse,\n    KatscanTokenListResponse,\n    ResultResponse,\n    TokenListResponse\n} from \"../interfaces/ApiResponseTypes\";\nimport {OpTransactionData} from \"../interfaces/OpTransactionData\";\nimport {katscanApiUrl} from \"../utils/StaticVariables\";\n\nconst BASE_URL = 'https://api.kasplex.org/v1';\n\n// Simulating an API call to fetch token details\nexport const getTokenDetails = async (tick: string): Promise<KatscanResponse<TokenHolder>> => {\n    try {\n        return await simpleRequest<KatscanResponse<TokenHolder>>(`${katscanApiUrl}/token/detail/${tick}`)\n    } catch (error) {\n        console.error('Error fetching token details:', error);\n        throw error;\n    }\n};\n\n// New function to fetch KRC-20 token list\nexport const getKRC20TokenList = async (limit = 100, sortField = 'holderTotal', sortDirection = 'desc'): Promise<{\n    result: TokenData[]\n}> => {\n    let allTokens: TokenData[] = [];\n    let cursor = null;\n\n    do {\n        const params: Record<string, string | number> = {\n            limit,\n            sortBy: sortField,\n            sortOrder: sortDirection,\n            ...(cursor && {cursor: cursor})\n        };\n\n        try {\n            const response = await sendRequest<KatscanTokenListResponse<TokenData[]>>({\n                method: 'GET',\n                url: `${katscanApiUrl}/token/tokenlist`,\n                params\n            });\n            allTokens = [...allTokens, ...response.result];\n            cursor = response.nextCursor;\n        } catch (error) {\n            console.error('Error fetching KRC20 token list:', error);\n            throw new Error(`Failed to fetch token list: ${(error as Record<string, string>).message}`);\n        }\n    } while (cursor);\n\n    return {result: allTokens};\n};\n\n// New function to fetch KRC-20 token list\nexport const getKRC20TokenListSequential = async (limit = 100, sortField = 'holderTotal', sortDirection = 'desc', cursor: string | null): Promise<{\n    result: TokenData[], cursor: string\n}> => {\n    const params: Record<string, string | number> = {\n        limit,\n        sortBy: sortField || 'holderTotal',\n        sortOrder: sortDirection || 'desc',\n        ...(cursor && {cursor: cursor})\n    };\n\n    try {\n        const response = await sendRequest<KatscanTokenListResponse<TokenData>>({\n            method: 'GET',\n            url: `${katscanApiUrl}/token/tokenlist`,\n            params\n        });\n        return {result: response.tokens, cursor: response.nextCursor}\n        // cursor = response.next;\n    } catch (error) {\n        console.error('Error fetching KRC20 token list:', error);\n        throw new Error(`Failed to fetch token list: ${(error as Record<string, string>).message}`);\n    }\n    // } while (cursor);\n\n\n};\n\n// New function to fetch token operations\nexport const getTokenOperations = async (tick: string, limit = 50, cursor: null | number = null): Promise<TokenListResponse<OpTransactionData[]>> => {\n    try {\n        const params: Record<string, string | number> = {tick, limit: limit.toString()}\n        if (cursor) params['next'] = cursor\n        return sendRequest<TokenListResponse<OpTransactionData[]>>({\n            method: 'GET', url: `${BASE_URL}/krc20/oplist`, params\n        });\n    } catch (error) {\n        console.error('Error fetching token operations:', error);\n        throw error;\n    }\n};\n\n// New function to fetch mint operations\nexport const getMintOperations = async (tick: string, limit = 50, cursor = null): Promise<OpTransactionData[]> => {\n    try {\n        const params: Record<string, string> = {tick, limit: limit.toString(), op: 'mint'}\n        if (cursor) params['next'] = cursor\n        const response = await sendRequest<TokenListResponse<OpTransactionData[]>>({\n            method: 'GET',\n            url: `${BASE_URL}/krc20/oplist`,\n            params\n        });\n        return response.result;\n    } catch (error) {\n        console.error('Error fetching mint operations:', error);\n        throw error;\n    }\n};\n\n// Add this new function to fetch detailed token information\nexport const getDetailedTokenInfo = async (tick: string): Promise<TokenData> => {\n    try {\n        const response = await simpleRequest<ResultResponse<TokenData>>(`${katscanApiUrl}/token/detail/${tick}`);\n        return response.result;\n    } catch (error) {\n        console.error('Error fetching detailed token information:', error);\n        throw error;\n    }\n};\n\n// Add this new function to fetch all mint transactions\n// todo invalid url params / more needed\n// export const getAllMintTransactions = async () => {\n//     const BASE_URL = 'https://katapi.nachowyborski.xyz/api';\n//     let allTransactions = [];\n//     let currentPage = 1;\n//     let hasNextPage = true;\n//\n//     while (hasNextPage) {\n//         try {\n//             const response = await sendRequest({\n//                     method: 'GET',\n//                     url: `${BASE_URL}/transactions`,\n//                     params: {op: 'mint', page: currentPage}\n//                 }\n//             );\n//\n//             const {transactions, pagination} = response.data;\n//             allTransactions = [...allTransactions, ...transactions];\n//\n//             hasNextPage = pagination.hasNextPage;\n//             currentPage++;\n//         } catch (error) {\n//             console.error('Error fetching mint transactions:', error);\n//             throw error;\n//         }\n//     }\n//\n//     return allTransactions;\n// };\n","export const censorTicker = (ticker: string): string => {\n    const offensiveWords: Record<string, string> = {\n        'NIGGA': 'N***A',\n        'NIGGAS': 'N****S',\n        'NIGGER': 'N****R',\n        'RETARD': 'R****D',\n        'FAG': 'F**',\n        'FAGS': 'F**S',\n        'FAGGOT': 'F****T',\n        'DYKE': 'D**E',\n        'DYKES': 'D**ES',\n        'TRANNY': 'T****Y',\n        'SPIC': 'S**C',\n        'SPICS': 'S**CS',\n        'KIKE': 'K**E',\n        'KIKES': 'K***S',\n        'CHINK': 'C***K',\n        'CHINKS': 'C***KS',\n        'GOOK': 'G**K',\n        'GOOKS': 'G**KS',\n        'WOP': 'W**',\n        'WOPS': 'W**S',\n        'TARD': 'T**D'\n    };\n    return offensiveWords[ticker] || ticker;\n};\n"],"names":["CustomSelect","_ref","data","hasSearch","onSelect","placeholder","searchRef","useRef","search","setSearch","useState","canClose","setCanClose","dropdownRef","changeDebounced","debounce","value","clickCloseIcon","e","_dropdownRef$current","stopPropagation","preventDefault","current","close","input","useMemo","_jsxs","_Fragment","children","_jsx","type","className","onChange","currentTarget","undefined","onClick","FaX","size","FaChevronDown","internalData","filter","single","label","toUpperCase","includes","onOpen","useCallback","ref","CustomDropdown","title","stayOpen","fitHeader","map","index","CustomDropdownItem","onSelectInternal","selection","_dropdownRef$current2","console","log","length","COINGECKO_API_URL","headers","jsonData","MarketCapCalculator","krc20List","setKrc20List","selectedKrc20Token","setSelectedKrc20Token","selectedCrypto","setSelectedCrypto","calculationResult","setCalculationResult","isLoading","setIsLoading","detailedTokenInfo","setDetailedTokenInfo","useFetch","url","navigate","useNavigate","useEffect","token","censorTicker","tick","async","getDetailedTokenInfo","error","fetchDetailedTokenInfo","cryptoData","sendHeadRequest","method","concat","id","params","getCryptoData","krc20Supply","max","Math","pow","dec","cryptoMarketCap","market_data","market_cap","usd","calculatedPrice","krc20Token","_objectSpread","holderTotal","crypto","maxSupply","max_supply","marketCap","currentPrice","current_price","addAlert","load","Page","header","Container","fluid","SEO","description","keywords","JsonLd","Row","Col","md","lg","Form","Group","Label","AsyncSelect","cacheOptions","loadOptions","inputValue","query","coins","coin","name","symbol","searchCryptos","LoadingSpinner","Card","Body","FontAwesomeIcon","icon","faCoins","formatNumber","faUsers","formatInteger","faChartLine","minted","Button","variant","handleKRC20DetailClick","faExternalLinkAlt","faDollarSign","handleCoinGeckoClick","window","open","NormalCard","titleProps","faInfoCircle","BASE_URL","getTokenDetails","simpleRequest","katscanApiUrl","getTokenOperations","limit","arguments","cursor","toString","sendRequest","result","ticker"],"sourceRoot":""}